h1(#importing-textures). Importing Textures

h3(#do-not-to-import-them-in-most-cases.). Do NOT to import them in most cases.

In most cases you *don't* want images imported when dealing with 2D and GUI. Just copy them to the filesystem. Read the tutorial on "dealing with image files":image_files before continuing! For 3D, textures are always imported by the 3D scene importer, so importing those is only useful when importing a texture used for 3D that doesn't come with the 3D scene (for example, in a shader). The flags and options are the same as here, so reading the rest of the document might help too.

h3(#ok-you-might-want-to-import-them.). OK you _might_ want to import them.

So, if you have read the previous tutorial on the texture exporter, the texture importer gives you more finer grained control on how textures are imported. If you want to change flags such as repeat, filter, mip&#45;maps, fix edges, etc _*PER texture*_, importing them is the best way to accomplish this (since you can't save such flags in a standard image file).

h3(#lack-of-mipmaps). Lack of MipMaps

Images in 3D hardware are scaled with a (bi)linear filter, but this method has limitations. When images are shrunk too much, two problems arise: &#42; *Aliasing*: Pixels are skipped too much, and the image shows discontinuities. This decrases quality. &#42; *Cache Misses*: Pixels being read are too far apart, so texture cache reads a lot more data than it should. This decreases performance.

(Todo, find image sample of why it looks bad)

To solve this, mipmaps are created. Mipmaps are versions of the image shrunk by half in both axis, recursively, until the image is 1 pixel of size. When the 3D hardware needs to shrink the image, it finds the largest mipmap it can scale from, and scales from there. This improves performance and image quality.
<p align="center">
<img src="images/mipmaps.png?200 "/>
</p>
Godot automatically creates mipmaps upon load for standard image files. This process is time consuming (although not much) and makes load times a little worse. Pre&#45;importing the textures allows the automatic generation of mipmaps.

h3(#unwanted-mipmaps). Unwanted MipMaps

Remember the previous point about mipmaps? Yes, they are cool, but mobile GPUs only support them if the textures are in power of 2 dimensions (ie 256x256 or 512x128). In these platforms, Godot will stretch and enlarge the texture to the closest power of 2 size and then generate the mipmaps. This process takes more of a performance hit and it might degrade the quality a little more.

Because of this, there are some scenarios when it may be desirable to not use them, and just use a linear filter. One of them is when working with graphical user interfaces (GUIs). Usually they are made of large images and don't stretch much. Even if the screen resolution is in a larger or smaller value than original art, the amount of stretch is not as much and the art can retain the quality. Pre&#45;importing the textures also allows the disabling of mipmap generation.

h3(#blending-artifacts). Blending Artifacts

The "blending equation":http://en.wikipedia.org/wiki/Alpha_compositing used by applications like Photoshop is too complex for real&#45;time. There are better approximations such as "pre&#45;multiplied alpha":http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx?Redirected=true, but they impose more stress in the asset pipeline. In the end, we are left with textures that have artifacts in the edges, because apps such as Photoshop store white pixels in completely transparent areas. Such white pixels end up showing thanks to the texture filter.

Godot has an option to fix the edges of the image (by painting invisible pixels the same color as the visible neighbours):

<p align="center">
<img src="images/fixedborder.png"></img>
</p>
However, this must be done every time the image changes. Pre&#45;Importing the textures makes sure that every time the original file changes, this artifact is fixed upon automatic re&#45;import.

h3(#texture-flags). Texture Flags

Textures have flags. The user can choose for them to repeat or clamp to edges (when UVs exceed the 0,0,1,1 boundary). The magnifying filter can also be turned off (for a Minecraft&#45;like effect). Such values can not be edited in standard file formats (png, jpg, etc), but can be edited and saved in Godot .tex files. Then again, the user may not want to change the values every time the texture changes. Pre&#45;Importing the textures also takes care of that.

h3(#texture-compression). Texture Compression

Asides from the typical texture compression, which saves space on disk (.png, jpg, etc), there are also texture compression formats that save space in memory (more specifically video memory. This allows to have much better looking textures in games without running out of memory, and decrease memory bandwidth when reading them so they are a big plus.

Video texture compression formats are several and non standard. Apple uses PVRTC. PC GPUs, consoles and nVidia Android devices use S3TC (BC), other chipsets use other formats. OpenGL ES 3.0 standardized on ETC format, but we are still a few years away from that working everywhere.

Still, when using this option, Godot converts and compresses to the relevant format depending on the target platform (as long as the user pre&#45;imported the texture and specified video ram compression!).

This kind of compression is often not desirable for many types 2D games and UIs because it has visible visual artifacts. This is specially noticeable on games that use the trendy vectory social game artwork. However, again, the fact that it saves space and improves performance may make up for it.

The 3D scene importer always imports textures with this option turned on.

h3(#atlases). Atlases

Remember how mobile GPUs have this limitation of textures having to be in power of 2 sizes to be able to generate mimpmaps for optimum stretching? What if we have a lot of images in different random sizes? All will have to be scaled and mipmapped when loaded (using more CPU and memory) or when imported (using more memory). This is probably still ok, but there is a tool that can help improve this situation.

Atlases are big textures that fit a lot of small textures inside efficiently. Godot supports creating atlases in the importer, and the imported files are just small resources that reference a region of the bigger texture.

Atlases can be a nice solution to save some space on GUI or 2D artwork by packing everything together. The current importer is not as useful for 3D though (3D Atlasses are created differently, and not all 3D models can use them).

As a small plus, atlases can decrease the amount of &quot;state changes&quot; when drawing. If a lot of objects that are drawn using several different textures are converted to atlas, then the texture rebinds per object will go from dozens or hundreds to one. This will give the performance a small boost.

h3(#artists-use-psd). Artists use PSD

Still wondering whether to use the texture importer or not? Remember that in the end, artists will often use Photoshop anyway, so it may be wiser to just let the import subsystem to take care of importing and converting the PSD files instead of asking the artist to save a png and copy it to the project every time.

h1(#texture-importer). Texture Importer

h3(#pre-importing). Pre&#45;Importing

Finally! It's time to take a look at the texture importer. There are 3 options in the import menu. They are pretty much (almost) the same dialog with a different set of defaults.

<p align="center">
<img src="images/importtex.png"></img>
</p>
When selected, the texture import dialog will appear. This is the default one for 2D textures:

<p align="center">
<img src="images/import_images.png"></img>
</p>
Each import option has a function, explained as follows:

h3(#source-textures). Source Texture(s):

One or more source images can be selected from the same folder (this importer can do batch&#45;conversion). This can be from inside or outside the project.

h3(#target-path). Target Path:

A destination folder must be provided. It must be inside the project, as textures will be converted and saved to it. Extensions will be changed to .tex (Godot resource file for textures), but names will be kept.

h3(#texture-format). Texture Format:

This combo allows to change the texture format (compression in this case):

<p align="center">
<img src="images/compressopts.png"></img>
</p>
Each of the four options described in this table together with their advantages and disadvantages (<img src="images/good.png"/>=Best, <img src="images/bad.png"/>=Worst):

|_. |_. Uncompressed|_. Compress Lossless (PNG)|_. Compress Lossy (WebP)|_. Compress VRAM|
|Description|Stored as raw pixels|Stored as PNG|Stored as WebP|Stored as S3TC/BC,PVRTC/ETC, depending on platform|
|Size on Disk|<img src="images/bad.png"/>Large|<img src="images/regular.png">Small|<img src="images/good.png">Very Small|<img src="images/regular.png">Small|
|Memory Usage|<img src="images/bad.png"/>Large|<img src="images/bad.png"/>Large|<img src="images/bad.png"/>Large|<img src="images/good.png">Small|
|Performance|<img src="images/regular.png">Normal|<img src="images/regular.png">Normal|<img src="images/regular.png">Normal|<img src="images/good.png">Fast|
|Quality Loss|<img src="images/good.png">None|<img src="images/good.png">None|<img src="images/regular.png">Slight|<img src="images/bad.png"/>Moderate|
|Load Time|<img src="images/regular.png">Normal|<img src="images/bad.png"/>Slow|<img src="images/bad.png"/>Slow|<img src="images/good.png">Fast|

h3(#texture-options). Texture Options:

Provided are a small amount of options for fine grained import control:

h4(#streaming-format). Streaming Format

This does nothing as of yet, but a texture format for streaming different mipmap levels is planned. Big engines have support for this.

h4(#fix-border-alpha). Fix Border Alpha

This will fix texture borders to avoid the white auras created by white invisible pixels (see the rant above).

h4(#alpha-bit-hint). Alpha Bit Hint

Godot auto&#45;detects if the texture needs alpha bit support for transparency (instead of full range), which is useful for compressed formats such as BC. This forces alpha to be 0 or 1.

h4(#compress-extra). Compress Extra

Some VRAM compressions have alternate formats that compress more at the expense of quality (PVRTC2 for example). If this is ticked, texture will be smaller but look worse.

h4(#no-mipmaps). No MipMaps

Force imported texture to NOT use mipmaps. This may be desirable in some cases for 2D (as explained in the rant above), though it's NEVER desirable for 3D.

h4(#repeat). Repeat

Texture will repeat when UV coordinates go beyond 1 and below 0. This is often desirable in 3D, but may generate artifacts in 2D.

h4(#filter). Filter

Enables linear filtering when a texture texel is larger than a screen pixel. This is usually turned on, unless it's required for artistic purposes (minecraft look, for example).

&#45;&#45;&#45; //"Juan Linietsky":reduzio@gmail.com 2013/11/10 18:11//

<ol start="3" style="list-style-type: lower-alpha;">
<li>Juan Linietsky, Ariel Manzur, Distributed under the terms of the "CC By":https://creativecommons.org/licenses/by/3.0/legalcode license.</li>
</ol>
