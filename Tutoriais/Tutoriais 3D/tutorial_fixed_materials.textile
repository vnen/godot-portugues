h1. Materiais Nativos (_Fixed Materials_)

h2. Introdução

Materiais Nativos (originalmente _Fixed Pipeline Materials_ e posteriormente _Fixed Materials_) é o tipo mais comum de material, usado como a opção mais comum encontrada em programas de modelagem 3D (como o Maya, 3DS Max e Blender). A grande vantagem desse método é a facilidade para os artistas. Eles podem fazer muitas coisas diferentes, rapidamente, sem precisar escrever uma linha de código. Materiais Nativos tem suas opções herdadas da classe de _[[Materiais]]._ Se você ainda não leu é recomendado você o fazê-lo antes de ler esse.

h2. Opções

Aqui está a lista de opções disponíveis para os materiais nativos:

p=. !http://godotengine.org/attachments/339/download!

A partir daqui todas as opções serão explicadas.

h2. Fixed Flags (Bandeiras)

Essas bandeiras controlam vários aspectos do material.

h3. Use Alpha (Usar a transparência)

Essa bandeira precisa estar ativa para os materiais transparentes se misturarem corretamente com o que está atrás, de outra forma o material sempre será opaco. Não ative essa bandeira ao menos que você precise, porque ela pode atrapalhar tanto a performance quanto a qualidade do jogo. Por padrão materiais transparentes não projetarão sombras (Ao menos que contenham áreas opacas e a opção _opaque pre-pass_ esteja ativada, veja o tutorial sobre _Materiais_ para ter mais informações)

p=. !http://godotengine.org/attachments/331/download!

h3. Use Vertex Color (Usar as cores da pintura de vértices)

A pintura de vértices é uma forma comum de adicionar detalhes ao modelo. Todos os programas de modelagem aceitam isso e alguns permitem você gravar as informações de oclusão de ambiente na cor dos vértices. A Godot permite o uso dessas informações nos materiais nativos, por modulação da cor difusa, quando for acionado.

p=. !http://godotengine.org/attachments/338/download!

h3. Point Size (Tamanho do ponto)

O _Point Size_ serve para escolher o tamanho do ponto em pixels para a renderização do ponto. Essa opção é muito usada para HUDs e ferramentas.

h3. Discard Alpha (Descartar transparência)

Quando a transparência está ativada (Veja acima _Use Alpha_) os pixels invisíveis são misturados com o que está atrás deles. Em alguns casos (em imagens renderizadas com alpha) é possível que alguns pixels invisíveis sobreponha pixels visíveis. Se essa situação desconfortável acontecer, marque essa opção. Dica essa opção é normalmente usada com o _opaque pre-pass_ (Veja o tutorial _Materiais_ para mais informação)


h2. Parâmetros

h3. Diffuse, Specular, Emission e Specular Exponent (Cor Difusa, Cor do Brilho, Cor de Emissão e Intensidade do Brilho)

Essas são as cores básicas dos materiais.

* *Diffuse Color*: é responsável pela luz que acerta o material e é difundida no ambiente. Essa cor varia conforme o ângulo da luz e a distância (nos casos de lâmpadas _spot_ e _omni_). Essa é a cor principal do material. Ela sempre pode aceitar a transparência.
* *Specular*: essa é a cor do reflexo responsável pelo brilho. Ela é afetada pelo _specular exponent_.
* *Emission*: é a cor da luz gerada pelo material (ela não vai clarear nada, ao menos que você dê um _Bake_ na cena). Essa cor é constante
* *Specular Exponent*: é a forma que a luz é refletida. Se o valor for alto, a luz será refletida completamente, caso ela seja baixa a cor será mais difusa.

Abaixo um exemplo de como esses parâmetro reagem:

p=. !http://godotengine.org/attachments/333/download!

h3. Shader & Shader Param (Sombreamento)

Shaders normais permitem que o usuário escreva seu próprio código. Materiais nativos vem com 4 tipos de sombreamentos predefinidos.

* *Lambert*: É o shader padrão, a cor difusa é proporcional ao ângulo da face com o da lâmpada.
* *Wrap*: Uma variação do _Lambert_, onde as áreas escondidas podem ser alteradas. Isso é útil para materiais como madeira, barro, cabelo, etc:
* *Velvet*: É parecido com o _Lambert_, mas adiciona uma luz que passa pelo objeto (ou _scattering_). É útil para couro e alguns efeitos metálicos, como o aço corridos.
* *Toon*: O sombreamento padrão para desenhos com um parâmetro de escurecer. O componente especular também pode se transformar em cartoon.

p=. !http://godotengine.org/attachments/337/download!

h3. Detail e Detail Mix (Detalhes e a mistura dos detalhes)

Os detalhes são a segunda textura difusa que pode ser misturada com a primeira (mais sobre texturas depois). _Detail blend_ e _Detail mix_ servem para controlar quanto dessa textura será misturada, aqui um exemplo do uso dessa textura.

p=. !http://godotengine.org/attachments/334/download!

h3. Normal Depth (Profundidade da Normal)

Essa opção controla a intensidade que a textura normal afeta as direções da luz. No 1 (o padrão) a textura normal é aplicada normalmente, em -1 ela é aplicada de forma invertida, no 0 ela é desativada. Valores quebrados e valores maiores que 1 são aceitos. Aqui um exemplo:

p=. !http://godotengine.org/attachments/336/download!

h3. Glow (Incandescência)

Esse valor controla quanto da cor será enviada para o _Glow Buffer_. Esse valor pode ser maior que 1 para um efeito mais forte. Para esse efeito funcionar o nó de _WorldEnvironment_ tem de existir com a opção _Glow_ ativada.

p=. !http://godotengine.org/attachments/335/download!

h3. Blend Mode (Modo de Mistura)

Normalmente os objetos são exibidos em _Mix Mode_ (objetos sem transparência não serão transparentes). Outros modos de mistura (_Add_ e _Sub_, ou _adição_ e _subtração_) existem para momentos especiais (geralmente efeitos de partículas, raios de luz, etc.), mas materiais também podem usar esses modos de mistura.

p=. !http://godotengine.org/attachments/188/download!

h3. Line Width (Espessura da Linha)

Quando estamos desenhando linhas, a sua espessura pode ser ajustada aqui, por material.

h2. Textures (Texturas)

A maior parte dos parâmetros a cima podem ter uma textura. Há 4 opções de como as texturas podem ser projetadas:

* *UV Coordinates (UV Array)*: Essa é a forma padrão quando um objeto é importado.
* *UV x UV XForm*: Coordenadas UV multiplicadas pela matriz UV Xform.
* *UV2 Coordinates*: Alguns objetos podem vim com dois mapeamentos UV, o segundo pode ser dedicado para os detalhes ou para a luz _bake_
* *Sphere*: A imagem sempre será projetada apontando para o jogador, com algumas deformidades devido o ângulo das faces.

O valor de cada pixel da textura é multiplicado pelo parâmetro original. Quer dizer, se uma textura for carregada na difusa, ela será multiplicada pela cor difusa do material. O mesmo se aplica para todos as outras texturas, com exceção do _specular exponent_, que simplesmente sobrepõe.

_(c) Juan Linietsky, Ariel Manzur, Distributed under the terms of the "CC by":https://creativecommons.org/licenses/by/3.0/legalcode license._

_Traduzido por Cairé. Revisado por George Marques. Distribuído sob a licença "Creative Commons By-SA":https://creativecommons.org/licenses/by-sa/4.0/legalcode ._