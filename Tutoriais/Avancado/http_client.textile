h1(#example). Example

Here's an example of using the "HTTPClient":class_httpclient class. It's just a script, so it can be run by executing:

bc(c). c:\godot> godot -s http_test.gd


It will connect and fetch a website.

<pre class="python">
extends SceneTree

# HTTPClient demo
# This simple class can do HTTP requests, it will not block but it needs to be polled

func _init():

    var err=0
    var http = HTTPClient.new() # Create the Client

    var err = http.connect(&quot;www.php.net&quot;,80) # Connect to host/port
    assert(err==OK) # Make sure connection was OK


    while( http.get_status()==HTTPClient.STATUS_CONNECTING or http.get_status()==HTTPClient.STATUS_RESOLVING):
                #Wait until resolved and connected
        http.poll()
        print(&quot;Connecting..&quot;)
        OS.delay_msec(500)

    assert( http.get_status() == HTTPClient.STATUS_CONNECTED ) # Could not connect

    # Some headers

    var headers=[
        &quot;User-Agent: Pirulo/1.0 (Godot)&quot;,
        &quot;Accept: */*&quot;
    ]

    err = http.request(HTTPClient.METHOD_GET,&quot;/ChangeLog-5.php&quot;,headers) # Request a page from the site (this one was chunked..)

    assert( err == OK ) # Make sure all is OK

    while (http.get_status() == HTTPClient.STATUS_REQUESTING):
        # Keep polling until the request is going on
        http.poll()
        print(&quot;Requesting..&quot;)
        OS.delay_msec(500)


    assert( http.get_status() == HTTPClient.STATUS_BODY or http.get_status() == HTTPClient.STATUS_CONNECTED ) # Make sure request finished well.

    print(&quot;response? &quot;,http.has_response()) # Site might not have a response.


    if (http.has_response()):
        #If there is a response..

        var headers = http.get_response_headers_as_dictionary() # Get response headers
        print(&quot;code: &quot;,http.get_response_code()) # Show response code
        print(&quot;**headers:\n&quot;,headers) # Show headers

        #Getting the HTTP Body

        if (http.is_response_chunked()):
            #Does it use chunks?
            print(&quot;Respose is Chunked!&quot;)
        else:
            #Or just plain Content-Length
            var bl = http.get_response_body_length()
            print(&quot;Response Length: &quot;,bl)

        #This method works for both anyway

        var rb = RawArray() #array that will hold the data

        while(http.get_status()==HTTPClient.STATUS_BODY):
            #While there is body left to be read
            http.poll()
            var chunk = http.read_response_body_chunk() # Get a chunk
            if (chunk.size()==0):
                #got nothing, wait for buffers to fill a bit
                OS.delay_usec(1000)
            else:
                rb = rb + chunk # append to read bufer


        #done!

        print(&quot;bytes got: &quot;,rb.size())
        var text = rb.get_string_from_ascii()
        print(&quot;Text: &quot;,text)

        
    quit()      
    
    
</pre>

<ol start="3" style="list-style-type: lower-alpha;">
<li>Juan Linietsky, Ariel Manzur, Distributed under the terms of the "CC By":https://creativecommons.org/licenses/by/3.0/legalcode license.</li>
</ol>
