h1(#simple-2d-game-pong). Simple 2D Game (Pong!)

h3(#pong). Pong

In this simple tutorial, a basic game of Pong will be created. There are plenty of more complex examples in the demos included with the engine, but this should get introduced to basic functionality for 2D Games.

h3(#assets). Assets

Some assets are included for this tutorial, the "pong pads, the ball and the divisor":media/pong_assets.zip.

h3(#scene-setup). Scene Setup

For the sake of the old times, the game will be in 640x400 pixels resolution. This can be configured in the Project Settings (see previous tutorials). The default background color should be set to black:

<p align="center">
<img src="images/clearcolor.png">
</p>
Create a "Node2D":class_node2d node for the project root. Node2D is the base type for the 2D engine. After this, add some sprites ("Sprite":class_sprite node) and set each to the corresponding texture. The final scene layour should look similar to this (note: the ball is in the middle!):

<p align="center">
<img src="images/pong_layout.png">
</p>
The scene tree should, then look similar to this:
<p align="center">
<img src="images/pong_nodes.png">
</p>
Save the scene as &quot;pong.scn&quot; and set it as the main scene in the project properties.

h3(#input-actions-setup). Input Actions Setup

There are so many input methods for video games... Keyboard, Joypad, Mouse, Touchscreen (Multitouch). Yet this is pong. The only input that matters is for the pads going up and down.

Handling all possible input methods can be very frustrating and take a lot of code. The fact that most games allow controller customization makes this worse. For this, Godot created the &quot;Input Actions&quot;. An action is defined, then input methods that trigger it are added.

Open the project properties dialog again, but this time move to the &quot;Input Map&quot; tab. On it, add 4 actions: &quot;left&#95;move&#95;up&quot;,&quot;left&#95;move&#95;down&quot;,&quot;right&#95;move&#95;up&quot;,&quot;right&#95;move&#95;down&quot;. Assign the keys that you desire. A/Z for left and Up/Down as keys should work in most cases.

<p align="center">
<img src="images/inputmap.png">
</p>
h3(#script). Script

Create a script for the root node of the scene and open it (should have been explained in the previous tutorial!). The script will inherit Node2D:

<pre class="python">
extends Node2D

func _ready():
    pass

</pre>

In the constructor, two things will be done. The first is to enable processing, and the second to store some useful values. Such values are the dimensions of the screen and the pad:

<pre class="python">

extends Node2D

var screen_size
var pad_size

func _ready():
    screen_size = get_viewport_rect().size
    pad_size = get_node(&quot;left&quot;).get_texture().get_size()
    set_process(true)

</pre>

Then, some variables used for in&#45;game will be added:

<pre class="python">

#speed of the ball (in pixels/second0

var ball_speed = 80
#direction of the ball (normal vector)

var direction = Vector2(-1,0)
#constant for pad speed (also in pixels/second)

const PAD_SPEED = 150

</pre>

Finally, the process function:

bc(python). func _process(delta):


Get some useful values for computation. The first is the ball position (from the node), the second is the rectangles (Rect2) of the pads. Sprites by defaut center the textures, so a small adjustment of size/2 must be added.

<pre class="python">

    var ball_pos = get_node(&quot;ball&quot;).get_pos()
    var left_rect = Rect2( get_node(&quot;left&quot;).get_pos() - pad_size/2, pad_size )
    var right_rect = Rect2( get_node(&quot;right&quot;).get_pos() - pad_size/2, pad_size )
</pre>

Since the ball pos was obtained, integrating it should be simple:

bc(python).     ball_pos+=direction*ball_speed*delta


Then, now that the ball has a new position, it should be tested against everything. First, the floor and the roof:

<pre class="python">

    if ( (ball_pos.y&lt;0 and direction.y &lt;0) or (ball_pos.y&gt;screen_size.y and direction.y&gt;0)):
        direction.y = -direction.y
</pre>

If one of the pads was touched, change direction and increase speed a little.

bc(python).     if ( (left_rect.has_point(ball_pos) and direction.x < 0) or (right_rect.has_point(ball_pos) and direction.x > 0)):
        direction.x=-direction.x
        ball_speed*=1.1
        direction.y=randf()*2.0-1
        direction = direction.normalized()



If the ball went out of the screen, it's game over. Game restarts:

bc(python).     if (ball_pos.x<0 or ball_pos.x>screen_size.x):
        ball_pos=screen_size*0.5 #ball goes to screen center
        ball_speed=80
        direction=Vector2(-1,0)


Once everything was done with the ball, the node is updated with the new position:

bc(python).     get_node("ball").set_pos(ball_pos)


Only updating the pads according to player input. the Input class is really useful here:

<pre class="python">

    #move left pad  
    var left_pos = get_node(&quot;left&quot;).get_pos()
    
    if (left_pos.y &gt; 0 and Input.is_action_pressed(&quot;left_move_up&quot;)):
        left_pos.y+=-PAD_SPEED*delta
    if (left_pos.y &lt; screen_size.y and Input.is_action_pressed(&quot;left_move_down&quot;)):
        left_pos.y+=PAD_SPEED*delta
        
    get_node(&quot;left&quot;).set_pos(left_pos)
        
    #move right pad 
    var right_pos = get_node(&quot;right&quot;).get_pos()
    
    if (right_pos.y &gt; 0 and Input.is_action_pressed(&quot;right_move_up&quot;)):
        right_pos.y+=-PAD_SPEED*delta
    if (right_pos.y &lt; screen_size.y and Input.is_action_pressed(&quot;right_move_down&quot;)):
        right_pos.y+=PAD_SPEED*delta
        
    get_node(&quot;right&quot;).set_pos(right_pos)
    
</pre>

And that's it! a simple Pong was written with a few lines of code.

<ol start="3" style="list-style-type: lower-alpha;">
<li>Juan Linietsky, Ariel Manzur, Distributed under the terms of the "CC By":https://creativecommons.org/licenses/by/3.0/legalcode license.</li>
</ol>
