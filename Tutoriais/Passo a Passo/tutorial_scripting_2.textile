h1(#scripting-continued). Scripting (Continued)

h3(#processing). Processing

Several actions in Godot are triggered by callbacks or virtual functions, so there is no need to check for writing code that runs all time time. Additionally, a lot can be done with animation players.

However,it is still a very common case to have a script process on every frame. There are two types of processing, idle processing and fixed processing.

Idle processing is activated with the "Node.set&#95;process":class_node#set_process() function. Once active, the "Node.&#95;process":class_node#set_process() callback will be called every frame. Example:

<pre class="python">

func _ready():
    set_process(true)

func _process(delta):
    [dosomething..]

</pre>

The delta parameter describes the time elapsed (in seconds, as floating point) since the previous call to &#95;process(). Fixed processing is similar, but only needed for synchronization with the physics engine.

A simple way to test this is to create a scene with a single Label node, with the following script:

<pre class="python">
extends Label

var accum=0

func _ready():
    set_process(true)

func _process(delta):
    accum+=delta
    set_text(str(accum))

</pre>

Which will show a counter increasing each second.

h3(#groups). Groups

Nodes can be added to groups (as many as desired per node). This is a simple yet useful feature for organizing large scenes. There are two ways to do this, the first is from the UI, from tne Groups button:

<p align="center">
<img src="images/groups.png">
</p>
And the second from code. One useful example would be, for example, to tag scenes which are enemies.

<pre class="python">

func _ready():
    add_to_group(&quot;enemies&quot;)

</pre>

This way, if the player, sneaking into the secret base, is discovered, all enemies can be notified about the alarm sounding, by using "SceneTree.call&#95;group":class_scenemainloop#call_group():

<pre class="python">

func _on_discovered():

    get_tree().call_group(0,&quot;guards&quot;,&quot;player_was_discovered&quot;)

</pre>

The above code calls the function &quot;player&#95;was&#95;discovered&quot; on every member of the group &quot;guards&quot;. Optionally, it is possible to get the full list of &quot;guards&quot; nodes by calling "SceneTree.get&#95;nodes&#95;in&#95;group":class_scenemainloop#get_nodes_in_group():

<pre class="python">

var guards = get_tree().get_nodes_in_group(&quot;guards&quot;)

</pre>

More will be added about "SceneTree":class_scenemainloop later.

h3(#notifications). Notifications

Godot has a system of notifications. This is usually not needed to be used from scripting, as it's too low level and virtual functions are provided for most of them. It's just good to know they exists. Simply add a "Object.&#95;notification":class_object#_notification() function in your script:

<pre class="python">

func _notification(what):
     if (what==NOTIFICATION_READY):
        print(&quot;This is the same as overriding _ready()...&quot;)
     elif (what==NOTIFICATION_PROCESS):     
        var delta = get_process_time()
        print(&quot;This is the same as overriding _process()...&quot;)
        
</pre>

The documentation of each class in the "class list":class_class_list shows the notifications it can receive. However, again, for most cases script provides simpler overrideable functions.

h3(#overrideable-functions). Overrideable Functions

As mentioned before, it's better to use these functions. Nodes provide many useful overrideable functions, which are described as follows:

<pre class="python">

func _enter_tree():
   pass # When the node enters the _Scene Tree_, it become acive and  this function is called. Children nodes have not entered the active scene yet. In general, it's better to use _ready() for most cases.

func _ready():
   pass # This function is called after _enter_tree, but it ensures that all children nodes have also entered the _Scene Tree_, and became active.
   
func _exit_tree():
   pass # When the node exists the _Scene Tree_, this function is called. Children nodes have all exited the _Scene Tree_  at this point and all became inactive.
   
func _process(delta):
   pass # When set_process() is enabled, this is called every frame

func _fixed_process(delta):
   pass # When set_fixed_process() is enabled, this is called every physics frame
   
func _paused():
   pass #Called when game is paused, after this call, the node will not receive any more process callbacks
   
func _unpaused():
   pass #Called when game is unpaused   
   
</pre>

h3(#creating-nodes). Creating Nodes

To create a node from code, just call the .new() method, (like for any other class based datatype). Example:

bc(python). var s
func _ready():
   s = Sprite.new() # create a new sprite!
   add_child(s) #add it as a child of this node


To delete a node, be it inside or outside the scene, free() must be used:

bc(python). func _someaction():
   s.free() # immediately removes the node from the scene and frees it


When a node is freed, it also frees all it's children nodes. Because of this, manually deleting nodes is much simpler than it appears. Just free the base node and everything else in the sub&#45;tree goes away with it.

However, it might happen very often that we might want to delete a node that is currently &quot;blocked&quot; this means, the node is emitting a signal or calling a function. This will result in crashing the game. Running Godot in the debugger often will catch this case and warn you about it.

The safest way to delete a node is by using "queue&#95;free":class_node#queue_free() instead. This erases the node during idle, safely.

bc(python). func _someaction():
   s.queue_free() # remove the node and delete it while nothing is happening


h3(#instancing-scenes). Instancing Scenes

Instancing a scene from code is pretty easy and done in two steps. The first one is to load the scene from disk.

bc(python). var scene = load("res://myscene.scn") # will load when the script is instanced


Preloading it can be more convenient sometimes, as it happens at parse time.

bc(python). var scene = preload("res://myscene.scn") # will load when parsing the script


But 'scene' is still not a node containing subnodes. It's packed in a special resource called "PackedScene":class_packedscene. To create the actual node, the function "PackedScene.instance":class_packedscene#instance() must be called. This will return the tree of nodes that can be added to the active scene:

bc(python). var node = scene.instance()
add_child(node)


The advantage of this two&#45;step process is that a packed scene may be kept loaded and ready to use, so it can be used to create as many instances as desired. This is specially useful, for example, to instance several enemies, bullets, etc. quickly in the active scene.

<ol start="3" style="list-style-type: lower-alpha;">
<li>Juan Linietsky, Ariel Manzur, Distributed under the terms of the "CC By":https://creativecommons.org/licenses/by/3.0/legalcode license.</li>
</ol>
