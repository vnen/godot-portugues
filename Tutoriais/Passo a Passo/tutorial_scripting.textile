h1. Programando

h2. Introdução

Muito já foi dito sobre sobre ferramentas que permitem que os usuários criarem jogos sem programação. É um sonho de muitos desenvolvedores independentes essa possibilidade de criar jogos sem precisar aprender linguagens e lógica de programação. Tal necessidade está por aí há muito tempo, mesmo dentro de empresas, na qual os designers de jogos desejam ter maior controle sobre o fluxo de produção.

Muitos produtos foram distribuídos prometendo um ambiente sem programação, mas o resulta é frequentemente incompleto, muito complexo, ou ineficiente se comparado ao código tradicional. Como resultado, a programação está aqui para ficar por um bom tempo. De fato, a direção geral dos motores de jogos é adicionar ferramentas que tentam reduzir a quantidade de código que precisa ser escrita para tarefas específicas, acelerando o desenvolvimento.

Nesse sentido, a Godot tomou algumas decisões de projeto na direção de tal objetivo. O primeiro e mais importante é o sistema de cenas. A meta deste pode não parecer óbvio logo de cara, mas funciona bem no futuro. Isto é, para aliviar os programadores da responsabilidade de arquitetar código.

Quando se projeta jogos usando o sistema de cenas, o projeto inteiro é fragmentado em +cenas complementares+ (e não individuais). As cenas se complementam em vez de serem separadas. Haverá diversos exemplos disso mais para a frente, mas é muito importante recordar-se disso.

Para aqueles com uma boa experiência de programação, isso significa um padrão de projeto diferente do MVC. A Godot promete eficiência sob o custo de dispensar os hábitos do MVC, que são substituídos pelo padrão de +cenas como um complemento+.

Também é usado o padrão "_extend_":http://c2.com/cgi/wiki?EmbedVsExtend nos scripts, sendo assim eles estendem cada uma classes disponíveis no motor.

h2. GDScript

[[GDScript]] (clique no link para ver a referência) é uma linguagem de tipagem dinâmica feita para se encaixar na Godot. Foi projetada com os seguintes objetivos:

* Primeiro e mais importante: ser simples, familiar e tão fácil de aprender quanto possível.
* Tornar o código legível e seguro contra erros. A sintaxe é, em sua maioria, inspirada no Python.

Os programadores geralmente levam alguns dias para aprendê-la e cerca de suas semanas para se sentirem confortáveis com ela.

No entanto, como na maioria das linguagens de tipagem dinâmica, a maior produtividade (código é fácil de aprender, rápido para escrever, sem compilação, etc.) é balanceada com uma pena de desempenho, mas o código mais crítico é escrito em C++ e já está na Engine (operações vetoriais, física, matemática, indexação, etc.) tornando o desempenho obtido mais do que suficiente para a maioria dos jogos.

De qualquer forma, se há necessidade de melhor desempenho, as partes críticas podem ser reescritas em C++ e expostas de forma transparente aos scripts. Isto permite substituir uma classe GDScript com uma classe C++ sem alterar o resto do jogo.

h2. Colocando script numa cena

Antes de continuar, por favor certifique-se de ler a referência do [[GDScript]]. É uma linguagem simples e a referência é curta, não deve tomar mais do que alguns minutos para dar uma olhada.

h3. Configuração da Cena

Este tutorial começará pela criação de um script para uma cena de GUI (_interface gráfica de usuário_) simples. Use o diálogo de adicionar nós para criar a seguinte hierarquia, com esses nós:

*  Panel
** Label
** Button

A árvore da cena deve se parecer com isso.

p=. !http://www.godotengine.org/attachments/40/download!

E tente fazer as coisas ficarem desse jeito no editor 2D, para que faça sentido:

p=. !http://www.godotengine.org/attachments/41/download!

Finalmente, salve a cena. Um nome apropriado poderia ser: "sayhello.scn".

h3. Adicionando um Script

Selecione o nó Panel, então pressione o ícone "Add Script" (_adicionar script_) como mostra a imagem:

p=. !http://www.godotengine.org/attachments/33/download!

O diálogo de criação de script irá aparecer. Este diálogo permite que você selecione a linguagem, o nome da classe, etc. GDScript não usa nomes de classe em arquivos de script, então este campo não é editável.

O script deve herdar de "Panel" (pois tem a intenção de estender o nó, que é do tipo Panel, e isso é preenchido automaticamente de qualquer forma). Selecione o nome do arquivo para o script (se você salvou a cena previamente, um nome como "sayhello.gd" será gerado automaticamente) e clique em "Create" (_Criar_):

p=. !http://www.godotengine.org/attachments/38/download!

Assim que isso for feito, o script será criado e adicionado ao nó. Você pode ver isso tanto como um ícone extra no nó quanto na propriedade "Script":

p=. !http://www.godotengine.org/attachments/37/download!

Para editar o script, basta apertar o ícone acima (apesar de que você já será levado diretamente a tela do editor de Scripts). Então virá o modelo de script:

p=. !http://www.godotengine.org/attachments/36/download!

Não há muita coisa por aqui. A função @_ready()@ é chamada quando o nó (e todos os seus filhos) entraram na cena ativa. (Lembre-se de que não é um construtor, pois este é a função @_init()@).

h3. O Papel do Script

Um script basicamente adiciona comportamento a um nó. Ele é usado para controlar as funções do nó ao qual é anexado e também de outros nós (filhos, pais, irmãos, etc.). O escopo local do script é o nó (da mesma forma que herança tradicional) e as funções virtuais do nó são capturadas pelo script.

p=. !http://www.godotengine.org/attachments/34/download!

h3. Lidando com sinais

Sinais em geral são usados em nós para GUI (embora outros nós também os possuam). Os sinais são *emitidos* quando algum tipo de ação específico acontece e pode ser conectado a qualquer função de qualquer instância de script. Nesse passo, o sinal "pressed" (_pressionado_) do botão será conectado a uma função personalizada.

Aqui vemos a interface para conectar sinais. Apenas selecione o nó e pressione o botão "Signals" (_Sinais_):

p=. !http://www.godotengine.org/attachments/42/download!

Que irá mostrar a lista de sinais que um Button pode emitir.

p=. !http://www.godotengine.org/attachments/35/download!

Mas neste exemplo não o usaremos. Não queremos tornar as coisas fáceis +demais+. Então por favor feche essa tela!

De qualquer forma, neste ponto fica claro que estamos interessados no sinal "pressed", então em vez de fazer isso pela interface visual, a conexão será feita via código.

Para isso, há uma função que é provavelmente das que serão mais usadas pelos programadores Godot, que é a "@get_node()@":https://github.com/okamstudio/godot/wiki/class_node#get_node. Esta função usa caminhos para recuperar nós na árvore atual ou em qualquer lugar da cena, relativos ao nó que contem o script.

Para recuperar o botão, o seguinte deve ser usado:

<pre><code class="python">
get_node("Button")
</code></pre>

Em seguida, um _callback_ (chamada de retorno) será adicionado para quando o botão for pressionado, que irá trocar o texto da Label:

<pre><code class="python">
func _on_button_pressed():	
	get_node("Label").set_text("HELLO!")
</code></pre>

Finalmente, o sinal "pressed" do botão será conectaod a tal callback dentro da função @_ready()@, usando a função "@connect@":https://github.com/okamstudio/godot/wiki/class_object#connect().

<pre><code class="python">
func _ready():
	get_node("Button").connect("pressed",self,"_on_button_pressed")
</code></pre>

No final o script deve se parecer com isso:

<pre><code class="python">
extends Panel

# member variables here, example:
# var a=2
# var b="textvar"

func _on_button_pressed():
	get_node("Label").set_text("HELLO!")

func _ready():
	get_node("Button").connect("pressed",self,"_on_button_pressed")
</code></pre>

Ao rodar a cena o seguinte resultado é esperado ao pressionar o botão:

p=. !http://www.godotengine.org/attachments/39/download!

*Nota*: Como é um engano comum neste tutorial, vamos deixar claro que @get_node(caminho)@ retorna os filhos imediatos ao nó controlados pelo script (_Panel_ nesse caso), então _Button_ deve ser um filho de _Panel_ para o código acima funcionar. Para dar mais contexto a esta clarificação, se _Button_ fosse filho de _Label_, o código para recuperá-lo seria o seguinte:

<pre><code class="python">
# not for this case
# but just in case
get_node("Label/Button") 
</code></pre>

Além disso, lembre-se de que os nós são referenciados por nome e não por tipo.

_(c) Juan Linietsky, Ariel Manzur, Distributed under the terms of the "CC By":https://creativecommons.org/licenses/by/3.0/legalcode license._

_Traduzido por George Marques. Distribuído sob a licença Creative "Commons By-SA":https://creativecommons.org/licenses/by-sa/4.0/legalcode ._
