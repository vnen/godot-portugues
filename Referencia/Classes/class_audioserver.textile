h1(#audioserver). AudioServer

h4(#inherits-object). *Inherits:* "Object":class_object

h4(#category-core). *Category:* Core

h3(#brief-description). Brief Description

Server interface for low level audio access.

h3(#member-functions). Member Functions

* "RID":class_rid *"sample&#95;create":#sample_create* *(* "int":class_int format, "bool":class_bool stereo, "int":class_int length *)*
* void *"sample&#95;set&#95;description":#sample_set_description* *(* "RID":class_rid sample, "String":class_string description *)*
* "String":class_string *"sample&#95;get&#95;description":#sample_get_description* *(* "RID":class_rid sample, "String":class_string arg1 *)* const
* "int":class_int *"sample&#95;get&#95;format":#sample_get_format* *(* "RID":class_rid sample *)* const
* "bool":class_bool *"sample&#95;is&#95;stereo":#sample_is_stereo* *(* "RID":class_rid sample *)* const
* "int":class_int *"sample&#95;get&#95;length":#sample_get_length* *(* "RID":class_rid sample *)* const
* void *"sample&#95;set&#95;signed&#95;data":#sample_set_signed_data* *(* "RID":class_rid sample, "RealArray":class_realarray data *)*
* void *"sample&#95;set&#95;data":#sample_set_data* *(* "RID":class_rid sample, "RawArray":class_rawarray arg1 *)*
* "RawArray":class_rawarray *"sample&#95;get&#95;data":#sample_get_data* *(* "RID":class_rid sample *)* const
* void *"sample&#95;set&#95;mix&#95;rate":#sample_set_mix_rate* *(* "RID":class_rid sample, "int":class_int mix&#95;rate *)*
* "int":class_int *"sample&#95;get&#95;mix&#95;rate":#sample_get_mix_rate* *(* "RID":class_rid sample *)* const
* void *"sample&#95;set&#95;loop&#95;format":#sample_set_loop_format* *(* "RID":class_rid sample, "int":class_int loop&#95;format *)*
* "int":class_int *"sample&#95;get&#95;loop&#95;format":#sample_get_loop_format* *(* "RID":class_rid sample *)* const
* void *"sample&#95;set&#95;loop&#95;begin":#sample_set_loop_begin* *(* "RID":class_rid sample, "int":class_int pos *)*
* "int":class_int *"sample&#95;get&#95;loop&#95;begin":#sample_get_loop_begin* *(* "RID":class_rid sample *)* const
* void *"sample&#95;set&#95;loop&#95;end":#sample_set_loop_end* *(* "RID":class_rid sample, "int":class_int pos *)*
* "int":class_int *"sample&#95;get&#95;loop&#95;end":#sample_get_loop_end* *(* "RID":class_rid sample *)* const
* "RID":class_rid *"voice&#95;create":#voice_create* *(* *)*
* void *"voice&#95;play":#voice_play* *(* "RID":class_rid voice, "RID":class_rid sample *)*
* void *"voice&#95;set&#95;volume":#voice_set_volume* *(* "RID":class_rid voice, "float":class_float volume *)*
* void *"voice&#95;set&#95;pan":#voice_set_pan* *(* "RID":class_rid voice, "float":class_float pan, "float":class_float depth=0, "float":class_float height=0 *)*
* void *"voice&#95;set&#95;filter":#voice_set_filter* *(* "RID":class_rid voice, "int":class_int type, "float":class_float cutoff, "float":class_float resonance, "float":class_float gain=0 *)*
* void *"voice&#95;set&#95;chorus":#voice_set_chorus* *(* "RID":class_rid voice, "float":class_float chorus *)*
* void *"voice&#95;set&#95;reverb":#voice_set_reverb* *(* "RID":class_rid voice, "int":class_int room, "float":class_float reverb *)*
* void *"voice&#95;set&#95;mix&#95;rate":#voice_set_mix_rate* *(* "RID":class_rid voice, "int":class_int rate *)*
* void *"voice&#95;set&#95;positional":#voice_set_positional* *(* "RID":class_rid voice, "bool":class_bool enabled *)*
* "float":class_float *"voice&#95;get&#95;volume":#voice_get_volume* *(* "RID":class_rid voice *)* const
* "float":class_float *"voice&#95;get&#95;pan":#voice_get_pan* *(* "RID":class_rid voice *)* const
* "float":class_float *"voice&#95;get&#95;pan&#95;height":#voice_get_pan_height* *(* "RID":class_rid voice *)* const
* "float":class_float *"voice&#95;get&#95;pan&#95;depth":#voice_get_pan_depth* *(* "RID":class_rid voice *)* const
* "int":class_int *"voice&#95;get&#95;filter&#95;type":#voice_get_filter_type* *(* "RID":class_rid voice *)* const
* "float":class_float *"voice&#95;get&#95;filter&#95;cutoff":#voice_get_filter_cutoff* *(* "RID":class_rid voice *)* const
* "float":class_float *"voice&#95;get&#95;filter&#95;resonance":#voice_get_filter_resonance* *(* "RID":class_rid voice *)* const
* "float":class_float *"voice&#95;get&#95;chorus":#voice_get_chorus* *(* "RID":class_rid voice *)* const
* "int":class_int *"voice&#95;get&#95;reverb&#95;type":#voice_get_reverb_type* *(* "RID":class_rid voice *)* const
* "float":class_float *"voice&#95;get&#95;reverb":#voice_get_reverb* *(* "RID":class_rid voice *)* const
* "int":class_int *"voice&#95;get&#95;mix&#95;rate":#voice_get_mix_rate* *(* "RID":class_rid voice *)* const
* "bool":class_bool *"voice&#95;is&#95;positional":#voice_is_positional* *(* "RID":class_rid voice *)* const
* void *"voice&#95;stop":#voice_stop* *(* "RID":class_rid voice *)*
* void *"free":#free* *(* "RID":class_rid rid *)*
* void *"set&#95;stream&#95;global&#95;volume&#95;scale":#set_stream_global_volume_scale* *(* "float":class_float scale *)*
* "float":class_float *"get&#95;stream&#95;global&#95;volume&#95;scale":#get_stream_global_volume_scale* *(* *)* const
* void *"set&#95;fx&#95;global&#95;volume&#95;scale":#set_fx_global_volume_scale* *(* "float":class_float scale *)*
* "float":class_float *"get&#95;fx&#95;global&#95;volume&#95;scale":#get_fx_global_volume_scale* *(* *)* const
* void *"set&#95;event&#95;voice&#95;global&#95;volume&#95;scale":#set_event_voice_global_volume_scale* *(* "float":class_float scale *)*
* "float":class_float *"get&#95;event&#95;voice&#95;global&#95;volume&#95;scale":#get_event_voice_global_volume_scale* *(* *)* const

h3(#numeric-constants). Numeric Constants

* *SAMPLE&#95;FORMAT&#95;PCM8* = *0* &#45; Sample format is 8 bits, signed.
* *SAMPLE&#95;FORMAT&#95;PCM16* = *1* &#45; Sample format is 16 bits, signed.
* *SAMPLE&#95;FORMAT&#95;IMA&#95;ADPCM* = *2* &#45; Sample format is IMA&#45;ADPCM compressed.
* *SAMPLE&#95;LOOP&#95;NONE* = *0* &#45; Sample does not loop.
* *SAMPLE&#95;LOOP&#95;FORWARD* = *1* &#45; Sample loops in forward mode.
* *SAMPLE&#95;LOOP&#95;PING&#95;PONG* = *2* &#45; Sample loops in a bidirectional way.
* *FILTER&#95;NONE* = *0* &#45; Filter is disable.
* *FILTER&#95;LOWPASS* = *1* &#45; Filter is a resonant lowpass.
* *FILTER&#95;BANDPASS* = *2* &#45; Filter is a resonant bandpass.
* *FILTER&#95;HIPASS* = *3* &#45; Filter is a resonant highpass.
* *FILTER&#95;NOTCH* = *4* &#45; Filter is a notch.
* *FILTER&#95;BANDLIMIT* = *6* &#45; Filter is a bandlimit (resonance used as highpass).
* *REVERB&#95;SMALL* = *0* &#45; Small reverb room (closet, bathroom, etc).
* *REVERB&#95;MEDIUM* = *1* &#45; Medium reverb room (living room)
* *REVERB&#95;LARGE* = *2* &#45; Large reverb room (warehouse).
* *REVERB&#95;HALL* = *3* &#45; Large reverb room with long decay.

h3(#description). Description

AudioServer is a low level server interface for audio access. It is&quot;#10;&quot;#9;in charge of creating sample data (playable audio) as well as it's&quot;#10;&quot;#9;playback via a voice interface.

h3(#member-function-description). Member Function Description

h4(#sample_create). <a name="sample_create">sample&#95;create</a>

* "RID":class_rid *sample&#95;create* *(* "int":class_int format, "bool":class_bool stereo, "int":class_int length *)*

Create an audio sample, return a "RID":class_rid referencing&quot;#10;&quot;#9;&quot;#9;&quot;#9;it. The sample will be created with a given format&quot;#10;&quot;#9;&quot;#9;&quot;#9;(from the SAMPLE&#95;FORMAT&#95;&#42; enum), a total length (in&quot;#10;&quot;#9;&quot;#9;&quot;#9;frames, not samples or bytes), in either stereo or&quot;#10;&quot;#9;&quot;#9;&quot;#9;mono.

h4(#sample_set_description). <a name="sample_set_description">sample&#95;set&#95;description</a>

* void *sample&#95;set&#95;description* *(* "RID":class_rid sample, "String":class_string description *)*

Set the description of an audio sample. Mainly used&quot;#10;&quot;#9;&quot;#9;&quot;#9;for organization.

h4(#sample_get_description). <a name="sample_get_description">sample&#95;get&#95;description</a>

* "String":class_string *sample&#95;get&#95;description* *(* "RID":class_rid sample, "String":class_string arg1 *)* const

Return the description of an audio sample. Mainly&quot;#10;&quot;#9;&quot;#9;&quot;#9;used for organization.

h4(#sample_get_format). <a name="sample_get_format">sample&#95;get&#95;format</a>

* "int":class_int *sample&#95;get&#95;format* *(* "RID":class_rid sample *)* const

Return the format of the audio sample, in the form&quot;#10;&quot;#9;&quot;#9;&quot;#9;of the SAMPLE&#95;FORMAT&#95;&#42; enum.

h4(#sample_is_stereo). <a name="sample_is_stereo">sample&#95;is&#95;stereo</a>

* "bool":class_bool *sample&#95;is&#95;stereo* *(* "RID":class_rid sample *)* const

Return wether the sample is stereo (2 channels)

h4(#sample_get_length). <a name="sample_get_length">sample&#95;get&#95;length</a>

* "int":class_int *sample&#95;get&#95;length* *(* "RID":class_rid sample *)* const

Return the length in frames of the audio sample (not&quot;#10;&quot;#9;&quot;#9;&quot;#9;samples or bytes).

h4(#sample_set_signed_data). <a name="sample_set_signed_data">sample&#95;set&#95;signed&#95;data</a>

* void *sample&#95;set&#95;signed&#95;data* *(* "RID":class_rid sample, "RealArray":class_realarray data *)*

Set the sample data for a given sample as an array&quot;#10;&quot;#9;&quot;#9;&quot;#9;of floats. The length must be equal to the sample&quot;#10;&quot;#9;&quot;#9;&quot;#9;lenght or an error will be produced.

h4(#sample_set_data). <a name="sample_set_data">sample&#95;set&#95;data</a>

* void *sample&#95;set&#95;data* *(* "RID":class_rid sample, "RawArray":class_rawarray arg1 *)*

Set the sample data for a given sample as an array&quot;#10;&quot;#9;&quot;#9;&quot;#9;of bytes. The length must be equal to the sample&quot;#10;&quot;#9;&quot;#9;&quot;#9;lenght expected in bytes or an error will be produced.

h4(#sample_get_data). <a name="sample_get_data">sample&#95;get&#95;data</a>

* "RawArray":class_rawarray *sample&#95;get&#95;data* *(* "RID":class_rid sample *)* const

Return the sample data as an array of bytes. The&quot;#10;&quot;#9;&quot;#9;&quot;#9;length will be the expected length in bytes.

h4(#sample_set_mix_rate). <a name="sample_set_mix_rate">sample&#95;set&#95;mix&#95;rate</a>

* void *sample&#95;set&#95;mix&#95;rate* *(* "RID":class_rid sample, "int":class_int mix&#95;rate *)*

Change the default mix rate of a given sample.

h4(#sample_get_mix_rate). <a name="sample_get_mix_rate">sample&#95;get&#95;mix&#95;rate</a>

* "int":class_int *sample&#95;get&#95;mix&#95;rate* *(* "RID":class_rid sample *)* const

Return the mix rate of the given sample.

h4(#sample_set_loop_format). <a name="sample_set_loop_format">sample&#95;set&#95;loop&#95;format</a>

* void *sample&#95;set&#95;loop&#95;format* *(* "RID":class_rid sample, "int":class_int loop&#95;format *)*

Set the loop format for a sample from the&quot;#10;&quot;#9;&quot;#9;&quot;#9;SAMPLE&#95;LOOP&#95;&#42; enum. As a warning, Ping Pong loops&quot;#10;&quot;#9;&quot;#9;&quot;#9;may not be available on some hardware&#45;mixing&quot;#10;&quot;#9;&quot;#9;&quot;#9;platforms.

h4(#sample_get_loop_format). <a name="sample_get_loop_format">sample&#95;get&#95;loop&#95;format</a>

* "int":class_int *sample&#95;get&#95;loop&#95;format* *(* "RID":class_rid sample *)* const

Return the loop format for a sample, as a value from&quot;#10;&quot;#9;&quot;#9;&quot;#9;the SAMPLE&#95;LOOP&#95;&#42; enum.

h4(#sample_set_loop_begin). <a name="sample_set_loop_begin">sample&#95;set&#95;loop&#95;begin</a>

* void *sample&#95;set&#95;loop&#95;begin* *(* "RID":class_rid sample, "int":class_int pos *)*

Set the initial loop point of a sample. Only has&quot;#10;&quot;#9;&quot;#9;&quot;#9;effect if sample loop is enabled. See "sample&#95;set&#95;loop&#95;format":#sample_set_loop_format.

h4(#sample_get_loop_begin). <a name="sample_get_loop_begin">sample&#95;get&#95;loop&#95;begin</a>

* "int":class_int *sample&#95;get&#95;loop&#95;begin* *(* "RID":class_rid sample *)* const

Return the initial loop point of a sample. Only has&quot;#10;&quot;#9;&quot;#9;&quot;#9;effect if sample loop is enabled. See "sample&#95;set&#95;loop&#95;format":#sample_set_loop_format.

h4(#sample_set_loop_end). <a name="sample_set_loop_end">sample&#95;set&#95;loop&#95;end</a>

* void *sample&#95;set&#95;loop&#95;end* *(* "RID":class_rid sample, "int":class_int pos *)*

Set the final loop point of a sample. Only has&quot;#10;&quot;#9;&quot;#9;&quot;#9;effect if sample loop is enabled. See "sample&#95;set&#95;loop&#95;format":#sample_set_loop_format.

h4(#sample_get_loop_end). <a name="sample_get_loop_end">sample&#95;get&#95;loop&#95;end</a>

* "int":class_int *sample&#95;get&#95;loop&#95;end* *(* "RID":class_rid sample *)* const

Return the final loop point of a sample. Only has&quot;#10;&quot;#9;&quot;#9;&quot;#9;effect if sample loop is enabled. See "sample&#95;set&#95;loop&#95;format":#sample_set_loop_format.

h4(#voice_create). <a name="voice_create">voice&#95;create</a>

* "RID":class_rid *voice&#95;create* *(* *)*

Allocate a voice for playback. Voices are&quot;#10;&quot;#9;&quot;#9;&quot;#9;persistent. A voice can play a single sample at the&quot;#10;&quot;#9;&quot;#9;&quot;#9;same time. See "sample&#95;create":#sample_create.

h4(#voice_play). <a name="voice_play">voice&#95;play</a>

* void *voice&#95;play* *(* "RID":class_rid voice, "RID":class_rid sample *)*

Start playback of a given voice using a given&quot;#10;&quot;#9;&quot;#9;&quot;#9;sample. If the voice was already playing it will be&quot;#10;&quot;#9;&quot;#9;&quot;#9;restarted.

h4(#voice_set_volume). <a name="voice_set_volume">voice&#95;set&#95;volume</a>

* void *voice&#95;set&#95;volume* *(* "RID":class_rid voice, "float":class_float volume *)*

Change the volume of a currently playing voice.&quot;#10;&quot;#9;&quot;#9;&quot;#9;Volume is expressed as linear gain where 0.0 is mute&quot;#10;&quot;#9;&quot;#9;&quot;#9;and 1.0 is default.

h4(#voice_set_pan). <a name="voice_set_pan">voice&#95;set&#95;pan</a>

* void *voice&#95;set&#95;pan* *(* "RID":class_rid voice, "float":class_float pan, "float":class_float depth=0, "float":class_float height=0 *)*

Change the pan of a currently playing voice and,&quot;#10;&quot;#9;&quot;#9;&quot;#9;optionally, the depth and height for a positional/3D&quot;#10;&quot;#9;&quot;#9;&quot;#9;sound. Panning values are expressed within the &#45;1 to&quot;#10;&quot;#9;&quot;#9;&quot;#9;&#43;1 range.

h4(#voice_set_filter). <a name="voice_set_filter">voice&#95;set&#95;filter</a>

* void *voice&#95;set&#95;filter* *(* "RID":class_rid voice, "int":class_int type, "float":class_float cutoff, "float":class_float resonance, "float":class_float gain=0 *)*

Set a resonant filter post processing for the voice.&quot;#10;&quot;#9;&quot;#9;&quot;#9;Filter type is a value from the FILTER&#95;&#42; enum.

h4(#voice_set_chorus). <a name="voice_set_chorus">voice&#95;set&#95;chorus</a>

* void *voice&#95;set&#95;chorus* *(* "RID":class_rid voice, "float":class_float chorus *)*

Set chorus send post processing for the voice (from&quot;#10;&quot;#9;&quot;#9;&quot;#9;0 to 1).

h4(#voice_set_reverb). <a name="voice_set_reverb">voice&#95;set&#95;reverb</a>

* void *voice&#95;set&#95;reverb* *(* "RID":class_rid voice, "int":class_int room, "float":class_float reverb *)*

Set the reverb send post processing for the voice (from&quot;#10;&quot;#9;&quot;#9;&quot;#9;0 to 1) and the reverb type, from the REVERB&#95;&#42; enum.

h4(#voice_set_mix_rate). <a name="voice_set_mix_rate">voice&#95;set&#95;mix&#95;rate</a>

* void *voice&#95;set&#95;mix&#95;rate* *(* "RID":class_rid voice, "int":class_int rate *)*

Set a different playback mix rate for the given&quot;#10;&quot;#9;&quot;#9;&quot;#9;voice.

h4(#voice_set_positional). <a name="voice_set_positional">voice&#95;set&#95;positional</a>

* void *voice&#95;set&#95;positional* *(* "RID":class_rid voice, "bool":class_bool enabled *)*

Set wether a given voice is positional. This is only&quot;#10;&quot;#9;&quot;#9;&quot;#9;interpreted as a hint and used for backends that may&quot;#10;&quot;#9;&quot;#9;&quot;#9;support binaural encoding.

h4(#voice_get_volume). <a name="voice_get_volume">voice&#95;get&#95;volume</a>

* "float":class_float *voice&#95;get&#95;volume* *(* "RID":class_rid voice *)* const

Return the current volume for a given voice.

h4(#voice_get_pan). <a name="voice_get_pan">voice&#95;get&#95;pan</a>

* "float":class_float *voice&#95;get&#95;pan* *(* "RID":class_rid voice *)* const

Return the current pan for a given voice (&#45;1 to &#43;1&quot;#10;&quot;#9;&quot;#9;&quot;#9;range).

h4(#voice_get_pan_height). <a name="voice_get_pan_height">voice&#95;get&#95;pan&#95;height</a>

* "float":class_float *voice&#95;get&#95;pan&#95;height* *(* "RID":class_rid voice *)* const

Return the current pan height for a given voice (&#45;1 to &#43;1&quot;#10;&quot;#9;&quot;#9;&quot;#9;range).

h4(#voice_get_pan_depth). <a name="voice_get_pan_depth">voice&#95;get&#95;pan&#95;depth</a>

* "float":class_float *voice&#95;get&#95;pan&#95;depth* *(* "RID":class_rid voice *)* const

Return the current pan depth for a given voice (&#45;1 to &#43;1&quot;#10;&quot;#9;&quot;#9;&quot;#9;range).

h4(#voice_get_filter_type). <a name="voice_get_filter_type">voice&#95;get&#95;filter&#95;type</a>

* "int":class_int *voice&#95;get&#95;filter&#95;type* *(* "RID":class_rid voice *)* const

Return the current selected filter type for a given&quot;#10;&quot;#9;&quot;#9;&quot;#9;voice, from the FILTER&#95;&#42; enum.

h4(#voice_get_filter_cutoff). <a name="voice_get_filter_cutoff">voice&#95;get&#95;filter&#95;cutoff</a>

* "float":class_float *voice&#95;get&#95;filter&#95;cutoff* *(* "RID":class_rid voice *)* const

Return the current filter cutoff (in hz) for a given&quot;#10;&quot;#9;&quot;#9;&quot;#9;voice.

h4(#voice_get_filter_resonance). <a name="voice_get_filter_resonance">voice&#95;get&#95;filter&#95;resonance</a>

* "float":class_float *voice&#95;get&#95;filter&#95;resonance* *(* "RID":class_rid voice *)* const

Return the current filter resonance for a given&quot;#10;&quot;#9;&quot;#9;&quot;#9;voice.

h4(#voice_get_chorus). <a name="voice_get_chorus">voice&#95;get&#95;chorus</a>

* "float":class_float *voice&#95;get&#95;chorus* *(* "RID":class_rid voice *)* const

Return the current chorus send for a given&quot;#10;&quot;#9;&quot;#9;&quot;#9;voice (0 to 1).

h4(#voice_get_reverb_type). <a name="voice_get_reverb_type">voice&#95;get&#95;reverb&#95;type</a>

* "int":class_int *voice&#95;get&#95;reverb&#95;type* *(* "RID":class_rid voice *)* const

Return the current reverb type for a given voice&quot;#10;&quot;#9;&quot;#9;&quot;#9;from the REVERB&#95;&#42; enum.

h4(#voice_get_reverb). <a name="voice_get_reverb">voice&#95;get&#95;reverb</a>

* "float":class_float *voice&#95;get&#95;reverb* *(* "RID":class_rid voice *)* const

Return the current reverb send for a given voice&quot;#10;&quot;#9;&quot;#9;&quot;#9;(0 to 1).

h4(#voice_get_mix_rate). <a name="voice_get_mix_rate">voice&#95;get&#95;mix&#95;rate</a>

* "int":class_int *voice&#95;get&#95;mix&#95;rate* *(* "RID":class_rid voice *)* const

Return the current mix rate for a given voice.

h4(#voice_is_positional). <a name="voice_is_positional">voice&#95;is&#95;positional</a>

* "bool":class_bool *voice&#95;is&#95;positional* *(* "RID":class_rid voice *)* const

Return wether the current voice is positional. See&quot;#10;&quot;#9;&quot;#9;&quot;#9;"voice&#95;set&#95;positional":#voice_set_positional.

h4(#voice_stop). <a name="voice_stop">voice&#95;stop</a>

* void *voice&#95;stop* *(* "RID":class_rid voice *)*

Stop a given voice.

h4(#free). <a name="free">free</a>

* void *free* *(* "RID":class_rid rid *)*

Free a "RID":class_rid resource.

h4(#set_stream_global_volume_scale). <a name="set_stream_global_volume_scale">set&#95;stream&#95;global&#95;volume&#95;scale</a>

* void *set&#95;stream&#95;global&#95;volume&#95;scale* *(* "float":class_float scale *)*

Set global scale for stream playback. Default is 1.0.

h4(#get_stream_global_volume_scale). <a name="get_stream_global_volume_scale">get&#95;stream&#95;global&#95;volume&#95;scale</a>

* "float":class_float *get&#95;stream&#95;global&#95;volume&#95;scale* *(* *)* const

Return the global scale for stream playback.
