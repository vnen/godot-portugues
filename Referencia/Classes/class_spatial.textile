h1(#spatial). Spatial

h4(#inherits-node). *Inherits:* "Node":class_node

h4(#category-core). *Category:* Core

h3(#brief-description). Brief Description

Base class for all 3D nodes.

h3(#member-functions). Member Functions

* void *"set&#95;transform":#set_transform* *(* "Transform":class_transform local *)*
* "Transform":class_transform *"get&#95;transform":#get_transform* *(* *)* const
* void *"set&#95;translation":#set_translation* *(* "Vector3":class_vector3 translation *)*
* "Vector3":class_vector3 *"get&#95;translation":#get_translation* *(* *)* const
* void *"set&#95;rotation":#set_rotation* *(* "Vector3":class_vector3 rotation *)*
* "Vector3":class_vector3 *"get&#95;rotation":#get_rotation* *(* *)* const
* void *"set&#95;scale":#set_scale* *(* "Vector3":class_vector3 scale *)*
* "Vector3":class_vector3 *"get&#95;scale":#get_scale* *(* *)* const
* void *"set&#95;global&#95;transform":#set_global_transform* *(* "Transform":class_transform global *)*
* "Transform":class_transform *"get&#95;global&#95;transform":#get_global_transform* *(* *)* const
* "Object":class_object *"get&#95;parent&#95;spatial":#get_parent_spatial* *(* *)* const
* void *"set&#95;ignore&#95;transform&#95;notification":#set_ignore_transform_notification* *(* "bool":class_bool enabled *)*
* void *"set&#95;as&#95;toplevel":#set_as_toplevel* *(* "bool":class_bool enable *)*
* "bool":class_bool *"is&#95;set&#95;as&#95;toplevel":#is_set_as_toplevel* *(* *)* const
* "World":class_world *"get&#95;world":#get_world* *(* *)* const
* void *"update&#95;gizmo":#update_gizmo* *(* *)*
* void *"set&#95;gizmo":#set_gizmo* *(* SpatialGizmo gizmo *)*
* SpatialGizmo *"get&#95;gizmo":#get_gizmo* *(* *)* const
* void *"show":#show* *(* *)*
* void *"hide":#hide* *(* *)*
* "bool":class_bool *"is&#95;visible":#is_visible* *(* *)* const
* "bool":class_bool *"is&#95;hidden":#is_hidden* *(* *)* const
* void *"rotate":#rotate* *(* "Vector3":class_vector3 normal, "float":class_float radians *)*
* void *"global&#95;rotate":#global_rotate* *(* "Vector3":class_vector3 normal, "float":class_float radians *)*
* void *"rotate&#95;x":#rotate_x* *(* "float":class_float radians *)*
* void *"rotate&#95;y":#rotate_y* *(* "float":class_float radians *)*
* void *"rotate&#95;z":#rotate_z* *(* "float":class_float radians *)*
* void *"translate":#translate* *(* "Vector3":class_vector3 offset *)*
* void *"global&#95;translate":#global_translate* *(* "Vector3":class_vector3 offset *)*
* void *"orthonormalize":#orthonormalize* *(* *)*
* void *"set&#95;identity":#set_identity* *(* *)*
* void *"look&#95;at":#look_at* *(* "Vector3":class_vector3 target, "Vector3":class_vector3 up *)*
* void *"look&#95;at&#95;from&#95;pos":#look_at_from_pos* *(* "Vector3":class_vector3 pos, "Vector3":class_vector3 target, "Vector3":class_vector3 up *)*

h3(#signals). Signals

* *visibility&#95;changed* *(* *)*

h3(#numeric-constants). Numeric Constants

* *NOTIFICATION&#95;TRANSFORM&#95;CHANGED* = *29* &#45; Spatial nodes receive this notifacation with their global transform changes. This means that either the current or a parent node changed it's transform.
* *NOTIFICATION&#95;ENTER&#95;WORLD* = *41*
* *NOTIFICATION&#95;EXIT&#95;WORLD* = *42*
* *NOTIFICATION&#95;VISIBILITY&#95;CHANGED* = *43*

h3(#description). Description

Spatial is the base for every type of 3D "Node":class_node. It contains a 3D "Transform":class_transform which can be set or get as local or global. If a Spatial "Node":class_node has Spatial children, their transforms will be relative to the parent.

h3(#member-function-description). Member Function Description

h4(#set_transform). <a name="set_transform">set&#95;transform</a>

* void *set&#95;transform* *(* "Transform":class_transform local *)*

Set the transform locally, relative to the parent spatial node.

h4(#get_transform). <a name="get_transform">get&#95;transform</a>

* "Transform":class_transform *get&#95;transform* *(* *)* const

Return the local transform, relative to the bone parent.

h4(#set_global_transform). <a name="set_global_transform">set&#95;global&#95;transform</a>

* void *set&#95;global&#95;transform* *(* "Transform":class_transform global *)*

Set the transform globally, relative to worldspace.

h4(#get_global_transform). <a name="get_global_transform">get&#95;global&#95;transform</a>

* "Transform":class_transform *get&#95;global&#95;transform* *(* *)* const

Return the gloal transform, relative to worldspace.

h4(#get_parent_spatial). <a name="get_parent_spatial">get&#95;parent&#95;spatial</a>

* "Object":class_object *get&#95;parent&#95;spatial* *(* *)* const

Return the parent "Spatial":class_spatial, or an empty "Object":class_object if no parent exists or parent is not of type [Spatial.
