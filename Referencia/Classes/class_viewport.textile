h1(#viewport). Viewport

h4(#inherits-node). *Inherits:* "Node":class_node

h4(#category-core). *Category:* Core

h3(#brief-description). Brief Description

Creates a sub&#45;view into the screen.

h3(#member-functions). Member Functions

* void *"set&#95;rect":#set_rect* *(* "Rect2":class_rect2 rect *)*
* "Rect2":class_rect2 *"get&#95;rect":#get_rect* *(* *)* const
* "World2D":class_world2d *"find&#95;world&#95;2d":#find_world_2d* *(* *)* const
* void *"set&#95;world":#set_world* *(* "World":class_world world *)*
* "World":class_world *"get&#95;world":#get_world* *(* *)* const
* "World":class_world *"find&#95;world":#find_world* *(* *)* const
* void *"set&#95;canvas&#95;transform":#set_canvas_transform* *(* "Matrix32":class_matrix32 xform *)*
* "Matrix32":class_matrix32 *"get&#95;canvas&#95;transform":#get_canvas_transform* *(* *)* const
* void *"set&#95;global&#95;canvas&#95;transform":#set_global_canvas_transform* *(* "Matrix32":class_matrix32 xform *)*
* "Matrix32":class_matrix32 *"get&#95;global&#95;canvas&#95;transform":#get_global_canvas_transform* *(* *)* const
* "Matrix32":class_matrix32 *"get&#95;final&#95;transform":#get_final_transform* *(* *)* const
* "Rect2":class_rect2 *"get&#95;visible&#95;rect":#get_visible_rect* *(* *)* const
* void *"set&#95;transparent&#95;background":#set_transparent_background* *(* "bool":class_bool enable *)*
* "bool":class_bool *"has&#95;transparent&#95;background":#has_transparent_background* *(* *)* const
* void *"set&#95;size&#95;override":#set_size_override* *(* "bool":class_bool enable, "Vector2":class_vector2 size=Vector2(&#45;1,&#45;1), "Vector2":class_vector2 margin=Vector2(0,0) *)*
* "Vector2":class_vector2 *"get&#95;size&#95;override":#get_size_override* *(* *)* const
* "bool":class_bool *"is&#95;size&#95;override&#95;enabled":#is_size_override_enabled* *(* *)* const
* void *"set&#95;size&#95;override&#95;stretch":#set_size_override_stretch* *(* "bool":class_bool enabled *)*
* "bool":class_bool *"is&#95;size&#95;override&#95;stretch&#95;enabled":#is_size_override_stretch_enabled* *(* *)* const
* void *"queue&#95;screen&#95;capture":#queue_screen_capture* *(* *)*
* "Image":class_image *"get&#95;screen&#95;capture":#get_screen_capture* *(* *)* const
* void *"set&#95;as&#95;render&#95;target":#set_as_render_target* *(* "bool":class_bool enable *)*
* "bool":class_bool *"is&#95;set&#95;as&#95;render&#95;target":#is_set_as_render_target* *(* *)* const
* void *"set&#95;render&#95;target&#95;vflip":#set_render_target_vflip* *(* "bool":class_bool enable *)*
* "bool":class_bool *"get&#95;render&#95;target&#95;vflip":#get_render_target_vflip* *(* *)* const
* void *"set&#95;render&#95;target&#95;clear&#95;on&#95;new&#95;frame":#set_render_target_clear_on_new_frame* *(* "bool":class_bool enable *)*
* "bool":class_bool *"get&#95;render&#95;target&#95;clear&#95;on&#95;new&#95;frame":#get_render_target_clear_on_new_frame* *(* *)* const
* void *"render&#95;target&#95;clear":#render_target_clear* *(* *)*
* void *"set&#95;render&#95;target&#95;filter":#set_render_target_filter* *(* "bool":class_bool enable *)*
* "bool":class_bool *"get&#95;render&#95;target&#95;filter":#get_render_target_filter* *(* *)* const
* void *"set&#95;render&#95;target&#95;gen&#95;mipmaps":#set_render_target_gen_mipmaps* *(* "bool":class_bool enable *)*
* "bool":class_bool *"get&#95;render&#95;target&#95;gen&#95;mipmaps":#get_render_target_gen_mipmaps* *(* *)* const
* void *"set&#95;render&#95;target&#95;update&#95;mode":#set_render_target_update_mode* *(* "int":class_int mode *)*
* "int":class_int *"get&#95;render&#95;target&#95;update&#95;mode":#get_render_target_update_mode* *(* *)* const
* "RenderTargetTexture":class_rendertargettexture *"get&#95;render&#95;target&#95;texture":#get_render_target_texture* *(* *)* const
* void *"set&#95;physics&#95;object&#95;picking":#set_physics_object_picking* *(* "bool":class_bool enable *)*
* "bool":class_bool *"get&#95;physics&#95;object&#95;picking":#get_physics_object_picking* *(* *)*
* "RID":class_rid *"get&#95;viewport":#get_viewport* *(* *)* const
* void *"input":#input* *(* "InputEvent":class_inputevent local&#95;event *)*
* void *"unhandled&#95;input":#unhandled_input* *(* "InputEvent":class_inputevent local&#95;event *)*
* void *"update&#95;worlds":#update_worlds* *(* *)*
* void *"set&#95;use&#95;own&#95;world":#set_use_own_world* *(* "bool":class_bool enable *)*
* "bool":class_bool *"is&#95;using&#95;own&#95;world":#is_using_own_world* *(* *)* const
* "Camera":class_camera *"get&#95;camera":#get_camera* *(* *)* const
* void *"set&#95;as&#95;audio&#95;listener":#set_as_audio_listener* *(* "bool":class_bool enable *)*
* "bool":class_bool *"is&#95;audio&#95;listener":#is_audio_listener* *(* *)* const
* void *"set&#95;as&#95;audio&#95;listener&#95;2d":#set_as_audio_listener_2d* *(* "bool":class_bool enable *)*
* "bool":class_bool *"is&#95;audio&#95;listener&#95;2d":#is_audio_listener_2d* *(* *)* const
* void *"set&#95;render&#95;target&#95;to&#95;screen&#95;rect":#set_render_target_to_screen_rect* *(* "Rect2":class_rect2 arg0 *)*
* "Vector2":class_vector2 *"get&#95;mouse&#95;pos":#get_mouse_pos* *(* *)* const
* void *"warp&#95;mouse":#warp_mouse* *(* "Vector2":class_vector2 to&#95;pos *)*

h3(#signals). Signals

* *size&#95;changed* *(* *)*

h3(#numeric-constants). Numeric Constants

* *RENDER&#95;TARGET&#95;UPDATE&#95;DISABLED* = *0*
* *RENDER&#95;TARGET&#95;UPDATE&#95;ONCE* = *1*
* *RENDER&#95;TARGET&#95;UPDATE&#95;WHEN&#95;VISIBLE* = *2*
* *RENDER&#95;TARGET&#95;UPDATE&#95;ALWAYS* = *3*

h3(#description). Description

A Viewport creates a different view into the screen, or a sub&#45;view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will renderon it too.

<pre>
Optionally, a viewport can have it's own 2D or 3D world, so they don't share what they draw with other viewports.

If a viewport is a child of a [Control](class_control), it will automatically take up it's same rect and position, otherwise they must be set manually.

Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.

Also, viewports can be assigned to different screens in the situation while devices have multiple screens.

Finaly, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
</pre>

h3(#member-function-description). Member Function Description

h4(#set_rect). <a name="set_rect">set&#95;rect</a>

* void *set&#95;rect* *(* "Rect2":class_rect2 rect *)*

Set the viewport rect. If the viewport is child of a control, it will use the same as the parent.

h4(#get_rect). <a name="get_rect">get&#95;rect</a>

* "Rect2":class_rect2 *get&#95;rect* *(* *)* const

Return the viewport rect. If the viewport is child of a control, it will use the same as the parent, otherwise if the rect is empty, the viewport will use all the allowed space.

h4(#get_visible_rect). <a name="get_visible_rect">get&#95;visible&#95;rect</a>

* "Rect2":class_rect2 *get&#95;visible&#95;rect* *(* *)* const

Return the final, visuble rect in global screen coordinates.

h4(#set_transparent_background). <a name="set_transparent_background">set&#95;transparent&#95;background</a>

* void *set&#95;transparent&#95;background* *(* "bool":class_bool enable *)*

Keep whathver the parent viewport has drawn

h4(#has_transparent_background). <a name="has_transparent_background">has&#95;transparent&#95;background</a>

* "bool":class_bool *has&#95;transparent&#95;background* *(* *)* const

If this viewport is a child of another viewport, keep the previously drawn background visible.

h4(#get_viewport). <a name="get_viewport">get&#95;viewport</a>

* "RID":class_rid *get&#95;viewport* *(* *)* const

Get the viewport RID from the visual server.
