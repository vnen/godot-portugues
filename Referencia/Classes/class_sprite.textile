h1(#sprite). Sprite

h4(#inherits-node2d). *Inherits:* "Node2D":class_node2d

h4(#category-core). *Category:* Core

h3(#brief-description). Brief Description

General purpose Sprite node.

h3(#member-functions). Member Functions

* void *"set&#95;texture":#set_texture* *(* "Texture":class_texture texture *)*
* "Texture":class_texture *"get&#95;texture":#get_texture* *(* *)* const
* void *"set&#95;centered":#set_centered* *(* "bool":class_bool centered *)*
* "bool":class_bool *"is&#95;centered":#is_centered* *(* *)* const
* void *"set&#95;offset":#set_offset* *(* "Vector2":class_vector2 offset *)*
* "Vector2":class_vector2 *"get&#95;offset":#get_offset* *(* *)* const
* void *"set&#95;flip&#95;h":#set_flip_h* *(* "bool":class_bool flip&#95;h *)*
* "bool":class_bool *"is&#95;flipped&#95;h":#is_flipped_h* *(* *)* const
* void *"set&#95;flip&#95;v":#set_flip_v* *(* "bool":class_bool flip&#95;v *)*
* "bool":class_bool *"is&#95;flipped&#95;v":#is_flipped_v* *(* *)* const
* void *"set&#95;region":#set_region* *(* "bool":class_bool enabled *)*
* "bool":class_bool *"is&#95;region":#is_region* *(* *)* const
* void *"set&#95;region&#95;rect":#set_region_rect* *(* "Rect2":class_rect2 rect *)*
* "Rect2":class_rect2 *"get&#95;region&#95;rect":#get_region_rect* *(* *)* const
* void *"set&#95;frame":#set_frame* *(* "int":class_int frame *)*
* "int":class_int *"get&#95;frame":#get_frame* *(* *)* const
* void *"set&#95;vframes":#set_vframes* *(* "int":class_int vframes *)*
* "int":class_int *"get&#95;vframes":#get_vframes* *(* *)* const
* void *"set&#95;hframes":#set_hframes* *(* "int":class_int hframes *)*
* "int":class_int *"get&#95;hframes":#get_hframes* *(* *)* const
* void *"set&#95;modulate":#set_modulate* *(* "Color":class_color modulate *)*
* "Color":class_color *"get&#95;modulate":#get_modulate* *(* *)* const

h3(#signals). Signals

* *frame&#95;changed* *(* *)*

h3(#description). Description

General purpose Sprite node. This Sprite node can show any texture as a sprite. The texture can be used as a spritesheet for animation, or only a region from a bigger texture can referenced, like an atlas.

h3(#member-function-description). Member Function Description

h4(#set_texture). <a name="set_texture">set&#95;texture</a>

* void *set&#95;texture* *(* "Texture":class_texture texture *)*

Set the base texture for the sprite.

h4(#get_texture). <a name="get_texture">get&#95;texture</a>

* "Texture":class_texture *get&#95;texture* *(* *)* const

Return the base texture for the sprite.

h4(#set_centered). <a name="set_centered">set&#95;centered</a>

* void *set&#95;centered* *(* "bool":class_bool centered *)*

Set whether the sprite should be centered on the origin.

h4(#is_centered). <a name="is_centered">is&#95;centered</a>

* "bool":class_bool *is&#95;centered* *(* *)* const

Return if the sprite is centered at the local origin.

h4(#set_offset). <a name="set_offset">set&#95;offset</a>

* void *set&#95;offset* *(* "Vector2":class_vector2 offset *)*

Set the sprite draw offset, useful for setting rotation pivots.

h4(#get_offset). <a name="get_offset">get&#95;offset</a>

* "Vector2":class_vector2 *get&#95;offset* *(* *)* const

Return sprite draw offst.

h4(#set_flip_h). <a name="set_flip_h">set&#95;flip&#95;h</a>

* void *set&#95;flip&#95;h* *(* "bool":class_bool flip&#95;h *)*

Set true to flip the sprite horizontaly.

h4(#is_flipped_h). <a name="is_flipped_h">is&#95;flipped&#95;h</a>

* "bool":class_bool *is&#95;flipped&#95;h* *(* *)* const

Return true if the sprite is flipped horizontally.

h4(#set_flip_v). <a name="set_flip_v">set&#95;flip&#95;v</a>

* void *set&#95;flip&#95;v* *(* "bool":class_bool flip&#95;v *)*

Set true to flip the sprite vertically.

h4(#is_flipped_v). <a name="is_flipped_v">is&#95;flipped&#95;v</a>

* "bool":class_bool *is&#95;flipped&#95;v* *(* *)* const

Return true if the sprite is flipped vertically.

h4(#set_region). <a name="set_region">set&#95;region</a>

* void *set&#95;region* *(* "bool":class_bool enabled *)*

Set the sprite as a sub&#45;region of a bigger texture. Useful for texture&#45;atlases.

h4(#is_region). <a name="is_region">is&#95;region</a>

* "bool":class_bool *is&#95;region* *(* *)* const

Return if the sprite reads from a region.

h4(#set_region_rect). <a name="set_region_rect">set&#95;region&#95;rect</a>

* void *set&#95;region&#95;rect* *(* "Rect2":class_rect2 rect *)*

Set the region rect to read from.

h4(#get_region_rect). <a name="get_region_rect">get&#95;region&#95;rect</a>

* "Rect2":class_rect2 *get&#95;region&#95;rect* *(* *)* const

Return the region rect to read from.

h4(#set_frame). <a name="set_frame">set&#95;frame</a>

* void *set&#95;frame* *(* "int":class_int frame *)*

Set the texture frame for a sprite&#45;sheet, works when vframes or hframes are greater than 1.

h4(#get_frame). <a name="get_frame">get&#95;frame</a>

* "int":class_int *get&#95;frame* *(* *)* const

Return the texture frame for a sprite&#45;sheet, works when vframes or hframes are greater than 1.

h4(#set_vframes). <a name="set_vframes">set&#95;vframes</a>

* void *set&#95;vframes* *(* "int":class_int vframes *)*

Set the amount of vertical frames and converts the sprite into a sprite&#45;sheet. This is useful for animation.

h4(#get_vframes). <a name="get_vframes">get&#95;vframes</a>

* "int":class_int *get&#95;vframes* *(* *)* const

Return the amount of vertical frames. See [set&#95;vframes].

h4(#set_hframes). <a name="set_hframes">set&#95;hframes</a>

* void *set&#95;hframes* *(* "int":class_int hframes *)*

Set the amount of horizontal frames and converts the sprite into a sprite&#45;sheet. This is useful for animation.

h4(#get_hframes). <a name="get_hframes">get&#95;hframes</a>

* "int":class_int *get&#95;hframes* *(* *)* const

Return the amount of horizontal frames. See [set&#95;hframes].

h4(#set_modulate). <a name="set_modulate">set&#95;modulate</a>

* void *set&#95;modulate* *(* "Color":class_color modulate *)*

Set color modulation for the sprite. All sprite pixels are multiplied by this color.

h4(#get_modulate). <a name="get_modulate">get&#95;modulate</a>

* "Color":class_color *get&#95;modulate* *(* *)* const

Return color modulation for the sprite. All sprite pixels are multiplied by this color.
