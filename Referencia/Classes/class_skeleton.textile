h1(#skeleton). Skeleton

h4(#inherits-spatial). *Inherits:* "Spatial":class_spatial

h4(#category-core). *Category:* Core

h3(#brief-description). Brief Description

Skeleton for characters and animated objects.

h3(#member-functions). Member Functions

* void *"add&#95;bone":#add_bone* *(* "String":class_string name *)*
* "int":class_int *"find&#95;bone":#find_bone* *(* "String":class_string name *)* const
* "String":class_string *"get&#95;bone&#95;name":#get_bone_name* *(* "int":class_int bone&#95;idx *)* const
* "int":class_int *"get&#95;bone&#95;parent":#get_bone_parent* *(* "int":class_int bone&#95;idx *)* const
* void *"set&#95;bone&#95;parent":#set_bone_parent* *(* "int":class_int bone&#95;idx, "int":class_int parent&#95;idx *)*
* "int":class_int *"get&#95;bone&#95;count":#get_bone_count* *(* *)* const
* "Transform":class_transform *"get&#95;bone&#95;rest":#get_bone_rest* *(* "int":class_int bone&#95;idx *)* const
* void *"set&#95;bone&#95;rest":#set_bone_rest* *(* "int":class_int bone&#95;idx, "Transform":class_transform rest *)*
* void *"bind&#95;child&#95;node&#95;to&#95;bone":#bind_child_node_to_bone* *(* "int":class_int bone&#95;idx, "Node":class_node node *)*
* void *"unbind&#95;child&#95;node&#95;from&#95;bone":#unbind_child_node_from_bone* *(* "int":class_int bone&#95;idx, "Node":class_node node *)*
* "Array":class_array *"get&#95;bound&#95;child&#95;nodes&#95;to&#95;bone":#get_bound_child_nodes_to_bone* *(* "int":class_int bone&#95;idx *)* const
* void *"clear&#95;bones":#clear_bones* *(* *)*
* "Transform":class_transform *"get&#95;bone&#95;pose":#get_bone_pose* *(* "int":class_int bone&#95;idx *)* const
* void *"set&#95;bone&#95;pose":#set_bone_pose* *(* "int":class_int bone&#95;idx, "Transform":class_transform pose *)*
* void *"set&#95;bone&#95;global&#95;pose":#set_bone_global_pose* *(* "int":class_int bone&#95;idx, "Transform":class_transform pose *)*
* "Transform":class_transform *"get&#95;bone&#95;global&#95;pose":#get_bone_global_pose* *(* "int":class_int bone&#95;idx *)* const
* "Transform":class_transform *"get&#95;bone&#95;custom&#95;pose":#get_bone_custom_pose* *(* "int":class_int bone&#95;idx *)* const
* void *"set&#95;bone&#95;custom&#95;pose":#set_bone_custom_pose* *(* "int":class_int bone&#95;idx, "Transform":class_transform custom&#95;pose *)*
* "Transform":class_transform *"get&#95;bone&#95;transform":#get_bone_transform* *(* "int":class_int bone&#95;idx *)* const

h3(#numeric-constants). Numeric Constants

* *NOTIFICATION&#95;UPDATE&#95;SKELETON* = *50*

h3(#description). Description

Skeleton provides a hierachial interface for managing bones, including pose, rest and animation (see "Animation":class_animation). Skeleton will support rag doll dynamics in the future.

h3(#member-function-description). Member Function Description

h4(#add_bone). <a name="add_bone">add&#95;bone</a>

* void *add&#95;bone* *(* "String":class_string name *)*

Add a bone, with name &quot;name&quot;. "get&#95;bone&#95;count":#get_bone_count will become the bone index.

h4(#find_bone). <a name="find_bone">find&#95;bone</a>

* "int":class_int *find&#95;bone* *(* "String":class_string name *)* const

Return the bone index that matches &quot;name&quot; as its name.

h4(#get_bone_name). <a name="get_bone_name">get&#95;bone&#95;name</a>

* "String":class_string *get&#95;bone&#95;name* *(* "int":class_int bone&#95;idx *)* const

Return the name of the bone at index &quot;index&quot;

h4(#get_bone_parent). <a name="get_bone_parent">get&#95;bone&#95;parent</a>

* "int":class_int *get&#95;bone&#95;parent* *(* "int":class_int bone&#95;idx *)* const

Return the bone index which is the parent of the bone at &quot;bone&#95;idx&quot;. If &#45;1, then bone has no parent. Note that the parent bone returned will always be less than &quot;bone&#95;idx&quot;.

h4(#set_bone_parent). <a name="set_bone_parent">set&#95;bone&#95;parent</a>

* void *set&#95;bone&#95;parent* *(* "int":class_int bone&#95;idx, "int":class_int parent&#95;idx *)*

Set the bone index &quot;parent&#95;idx&quot; as the parent of the bone at &quot;bone&#95;idx&quot;. If &#45;1, then bone has no parent. Note: &quot;parent&#95;idx&quot; must be less than &quot;bone&#95;idx&quot;.

h4(#get_bone_count). <a name="get_bone_count">get&#95;bone&#95;count</a>

* "int":class_int *get&#95;bone&#95;count* *(* *)* const

Return the amount of bones in the skeleton.

h4(#get_bone_rest). <a name="get_bone_rest">get&#95;bone&#95;rest</a>

* "Transform":class_transform *get&#95;bone&#95;rest* *(* "int":class_int bone&#95;idx *)* const

Return the rest transform for a bone &quot;bone&#95;idx&quot;.

h4(#set_bone_rest). <a name="set_bone_rest">set&#95;bone&#95;rest</a>

* void *set&#95;bone&#95;rest* *(* "int":class_int bone&#95;idx, "Transform":class_transform rest *)*

Set the rest transform for bone &quot;bone&#95;idx&quot;

h4(#bind_child_node_to_bone). <a name="bind_child_node_to_bone">bind&#95;child&#95;node&#95;to&#95;bone</a>

* void *bind&#95;child&#95;node&#95;to&#95;bone* *(* "int":class_int bone&#95;idx, "Node":class_node node *)*

Deprecated soon

h4(#unbind_child_node_from_bone). <a name="unbind_child_node_from_bone">unbind&#95;child&#95;node&#95;from&#95;bone</a>

* void *unbind&#95;child&#95;node&#95;from&#95;bone* *(* "int":class_int bone&#95;idx, "Node":class_node node *)*

Deprecated soon

h4(#get_bound_child_nodes_to_bone). <a name="get_bound_child_nodes_to_bone">get&#95;bound&#95;child&#95;nodes&#95;to&#95;bone</a>

* "Array":class_array *get&#95;bound&#95;child&#95;nodes&#95;to&#95;bone* *(* "int":class_int bone&#95;idx *)* const

Deprecated Soon

h4(#clear_bones). <a name="clear_bones">clear&#95;bones</a>

* void *clear&#95;bones* *(* *)*

Clear all the bones in this skeleton.

h4(#get_bone_pose). <a name="get_bone_pose">get&#95;bone&#95;pose</a>

* "Transform":class_transform *get&#95;bone&#95;pose* *(* "int":class_int bone&#95;idx *)* const

Return the pose transform for bone &quot;bone&#95;idx&quot;.

h4(#set_bone_pose). <a name="set_bone_pose">set&#95;bone&#95;pose</a>

* void *set&#95;bone&#95;pose* *(* "int":class_int bone&#95;idx, "Transform":class_transform pose *)*

Return the pose transform for bone &quot;bone&#95;idx&quot;.
