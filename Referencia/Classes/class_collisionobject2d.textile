h1(#collisionobject2d). CollisionObject2D

h4(#inherits-node2d). *Inherits:* "Node2D":class_node2d

h4(#category-core). *Category:* Core

h3(#brief-description). Brief Description

Base node for 2D collisionables.

h3(#member-functions). Member Functions

* void *"&#95;input&#95;event":#_input_event* *(* "Object":class_object viewport, "InputEvent":class_inputevent event, "int":class_int shape&#95;idx *)* virtual
* void *"add&#95;shape":#add_shape* *(* "Shape2D":class_shape2d shape, "Matrix32":class_matrix32 transform=1,0, 0,1, 0,0 *)*
* "int":class_int *"get&#95;shape&#95;count":#get_shape_count* *(* *)* const
* void *"set&#95;shape":#set_shape* *(* "int":class_int shape&#95;idx, "Shape":class_shape shape *)*
* void *"set&#95;shape&#95;transform":#set_shape_transform* *(* "int":class_int shape&#95;idx, "Matrix32":class_matrix32 transform *)*
* void *"set&#95;shape&#95;as&#95;trigger":#set_shape_as_trigger* *(* "int":class_int shape&#95;idx, "bool":class_bool enable *)*
* "Shape2D":class_shape2d *"get&#95;shape":#get_shape* *(* "int":class_int shape&#95;idx *)* const
* "Matrix32":class_matrix32 *"get&#95;shape&#95;transform":#get_shape_transform* *(* "int":class_int shape&#95;idx *)* const
* "bool":class_bool *"is&#95;shape&#95;set&#95;as&#95;trigger":#is_shape_set_as_trigger* *(* "int":class_int shape&#95;idx *)* const
* void *"remove&#95;shape":#remove_shape* *(* "int":class_int shape&#95;idx *)*
* void *"clear&#95;shapes":#clear_shapes* *(* *)*
* "RID":class_rid *"get&#95;rid":#get_rid* *(* *)* const
* void *"set&#95;pickable":#set_pickable* *(* "bool":class_bool enabled *)*
* "bool":class_bool *"is&#95;pickable":#is_pickable* *(* *)* const

h3(#signals). Signals

* *mouse&#95;enter* *(* *)*
* *input&#95;event* *(* "Object":class_object viewport, "InputEvent":class_inputevent event, "int":class_int shape&#95;idx *)*
* *mouse&#95;exit* *(* *)*

h3(#description). Description

CollisionObject2D is the base class for 2D physics collisionables. They can hold any number of 2D collision shapes. Usually, they are edited by placing CollisionBody2D and CollisionPolygon2D nodes as children. Such nodes are for reference ant not present outside the editor, so code should use the regular shape API.

h3(#member-function-description). Member Function Description

h4(#add_shape). <a name="add_shape">add&#95;shape</a>

* void *add&#95;shape* *(* "Shape2D":class_shape2d shape, "Matrix32":class_matrix32 transform=1,0, 0,1, 0,0 *)*

Add a "Shape2D":class_shape2d to the collision body, with a given custom transform.

h4(#get_shape_count). <a name="get_shape_count">get&#95;shape&#95;count</a>

* "int":class_int *get&#95;shape&#95;count* *(* *)* const

Return the amount of shapes in the collision body.

h4(#set_shape). <a name="set_shape">set&#95;shape</a>

* void *set&#95;shape* *(* "int":class_int shape&#95;idx, "Shape":class_shape shape *)*

Change a shape in the collision body.

h4(#set_shape_transform). <a name="set_shape_transform">set&#95;shape&#95;transform</a>

* void *set&#95;shape&#95;transform* *(* "int":class_int shape&#95;idx, "Matrix32":class_matrix32 transform *)*

Change the shape transform in the collision body.

h4(#get_shape). <a name="get_shape">get&#95;shape</a>

* "Shape2D":class_shape2d *get&#95;shape* *(* "int":class_int shape&#95;idx *)* const

Return the shape in the given index.

h4(#get_shape_transform). <a name="get_shape_transform">get&#95;shape&#95;transform</a>

* "Matrix32":class_matrix32 *get&#95;shape&#95;transform* *(* "int":class_int shape&#95;idx *)* const

Return the shape transform in the given index.

h4(#remove_shape). <a name="remove_shape">remove&#95;shape</a>

* void *remove&#95;shape* *(* "int":class_int shape&#95;idx *)*

Remove the shape in the given index.

h4(#clear_shapes). <a name="clear_shapes">clear&#95;shapes</a>

* void *clear&#95;shapes* *(* *)*

Remove all shapes.
