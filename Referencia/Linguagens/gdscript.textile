h1(#introduction). Introduction

GDScript is a high level, dynamically typed programming language used to create content. It uses a syntax that is very similar to the Python language (blocks are indent&#45;based) and its goal is to be very optimal and tightly integrated with the engine, allowing great flexibility for content creation and integration.

h1(#history). History

Initially, Godot was designed to support multiple scripting languages (this ability still exists today). However, only GDScript is in use right now. There is a little history behind this.

In the early days, the engine used the "Lua":http://www.lua.org/ scripting language. Lua is fast, but creating bindings to an object oriented system (by using fallbacks) was complex and slow and took an enormous amount of code. After some experiments with "Python":http://www.python.org/, it also proved difficult to embed.

The last third party scripting language that was used for shipped games was "Squirrel":http://squirrel-lang.org/, but it was also dropped too. At that point, it became evident that Godot would work more optimally by using a built&#45;in scripting language, as the following barriers were met:

* Godot embeds scripts in nodes, most languages are not designed with this in mind.
* Godot uses several built&#45;in data types for 2D and 3D math, script languages do not provide this, and binding them is inefficient.
* Godot uses threads heavily for lifting and initializing data from the net or disk, script interpreters for common languages are not friendly to this.
* Godot already has a memory management model for resources, most script languages provide their own, which resulted in duplicate effort and bugs.
* Binding code is always messy and results in several failure points, unexpected bugs and general unmaintainability.

Finally, GDScript was written as a custom solution. The language and interpreter for it ended up being smaller than the binding code itself for Lua and Squirrel, and equally as functional. With time, having a built&#45;in language has proven to be a huge advantage.

h1(#example). Example

Some people can learn better by just taking a look at the syntax, so here's a simple example of how it looks.

<pre class="python">
# a file is a class!

# inheritance

extends BaseClass

# member variables

var a = 5 
var s = &quot;Hello&quot;
var arr = [1, 2, 3]
var dict = {&quot;key&quot;:&quot;value&quot;, 2:3}

# constants

const answer = 42
const thename = &quot;Charly&quot;

# built-in vector types

var v2 = Vector2(1, 2)
var v3 = Vector3(1, 2, 3)

# function

func some_function(param1, param2):
    var local_var = 5

    if param1 &lt; local_var:
        print(param1)
    elif param2 &gt; 5:
        print(param2)
    else:
        print(&quot;fail!&quot;)

    for i in range(20):
        print(i)

    while(param2 != 0):
        param2 -= 1

    var local_var2 = param1+3
    return local_var2


# subclass

class Something:
    var a = 10

# constructor

func _init():
    print(&quot;constructed!&quot;)
    var lv = Something.new()
    print(lv.a)
</pre>

If you have previous experience with statically typed languages such as C, C&#43;&#43; or C# but never used a dynamically typed one, it is advised you read this tutorial about "Using GDScript Efficiently":tutorial_gdscript_efficiently.

h1(#language). Language

h2(#identifiers). Identifiers

Any string that restricts itself to alphabetic characters ('a' to 'z' and 'A' to 'Z'), digits ('0' to '9') and '&#95;' qualifies as an identifier. Additionally, identifiers must not begin with a digit. Identifiers are case&#45;sensitive ('foo' is different to 'FOO').

h2(#keywords). Keywords

The following is the list of keywords supported by the language. Since keywords are reserved words (tokens), they can't be used as identifiers.

h2(#operators). Operators

The following is the list of supported operators and their precedence (TODO, change since this was made to reflect python operators)

Operator &#124; Description &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; &#124; &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; x[index] &#124; Subscription, Highest Priority x.attribute &#124; Attribute Reference extends &#124; Instance Type Checker ~ &#124; Bitwise NOT &#45;x &#124; Negative &#42; / % &#124; Multiplication / Division / Remainder &#43; &#45; &#124; Addition / Subtraction &lt;&lt; &gt;&gt; &#124; Bit Shifting &amp; &#124; Bitwise AND ^ &#124; Bitwise XOR &#124; &#124; Bitwise OR &lt; &gt; == != &gt;= &lt;= &#124; Comparisons in &#124; Content Test ! not &#124; Boolean NOT and &amp;&amp; &#124; Boolean AND or &#124;&#124; &#124; Boolean OR = &#43;= &#45;= &#42;= /= %= &amp;= &#124;= &#124; Assignment, Lowest Priority

h2(#literals). Literals

|_. Literal|_. Name|
|45|Base 10 Integer|
|0x8F51|Base 16 (hex) Integer|
|3.14, 58.1e&#45;10|Floating Point Number (real)|
|'Hello', &quot;Hi&quot;|Strings|
|&quot;&quot;&quot;Hello, Dude&quot;&quot;&quot;|Multiline String|
|&#64;&quot;Node/Label&quot;|Node Path or StringName|

h2(#comments). Comments

Anything from a '#' to the end of the line is ignored and is considered a comment.

bc(python). # This is a comment


h1(#built-in-types). Built&#45;In Types

h2(#basic-built-in-types). Basic Built&#45;In Types

A variable in GDScript can be assigned to several built&#45;in types.

h3(#null). null

'null' is a data type that contains no information, nothing assigned, and it's just empty. It can only be set to one value: 'null'.

h3(#bool). bool

The Boolean data type can only contain 'true' or 'false'.

h3(#int). int

The integer data type can only contain integer numbers, (both negative and positive).

h3(#float). float

Used to contain a floating point value (real numbers).

h3(#string). "String":class_string

A sequence of characters in unicode format. Strings can contain the standard C escape sequences.

h2(#vector-built-in-types). Vector Built&#45;In Types

h3(#vector2). "Vector2":class_vector2

2D vector type containing x and y fields. Can alternatively access fields as width and height for readability. Can also be accessed as array.

h3(#rect2). "Rect2":class_rect2

2D Rectangle type containing two vectors fields: &quot;pos&quot; and &quot;size&quot;. Alternatively contains an &quot;end&quot; field which is &quot;pos&#43;size&quot;.

h3(#vector3). "Vector3":class_vector3

3D vector type containing x, y and z fields. This can also be accessed as an array.

h3(#matrix32). "Matrix32":class_matrix32

3x2 matrix used for 2D transforms.

h3(#plane). "Plane":class_plane

3D Plane type in normalized form that contains a &quot;normal&quot; vector field and a &quot;d&quot; scalar distance.

h3(#quat). "Quat":class_quat

Quaternion is a datatype used for representing a 3D rotation. It's useful for interpolating rotations.

h3(#aabb). "AABB":class_aabb

Axis Aligned bounding box (or 3D box) contains 2 vectors fields: &quot;pos&quot; and &quot;size&quot;. Alternatively contains an &quot;end&quot; field which is &quot;pos&#43;size&quot;.

h3(#matrix3). "Matrix3":class_matrix3

3x3 matrix used for 3D rotation and scale. It contains 3 vector fields (x, y and z) and can also be accessed as an array of 3D vectors.

h3(#transform). "Transform":class_transform

3D Transform contains a Matrix3 field &quot;basis&quot; and a Vector3 field &quot;origin&quot;.

h2(#engine-built-in-types). Engine Built&#45;In Types

h3(#color). "Color":class_color

Color data type contains r, g, b, and a fields. It can also be accessed as h, s, and v for hue/saturation/value.

h3(#image). "Image":class_image

Contains a custom format 2D image and allows direct access to the pixels.

h3(#nodepath). "NodePath":class_nodepath

Compiled path to a node used mainly in the scene system. It can be easily assigned to, and from, a String.

h3(#rid). "RID":class_rid

Resource ID (RID). Servers use generic RIDs to reference opaque data.

h3(#object). "Object":class_object

Base class for anything that is not a built&#45;in type.

h3(#inputevent). "InputEvent":class_inputevent

Events from input devices are contained in very compact form in InputEvent objects. Due to the fact that they can be received in high amounts from frame to frame they are optimized as their own data type.

h2(#container-built-in-types). Container Built&#45;In Types

h3(#array). "Array":class_array

Generic sequence of objects. Its size can be changed to anything and starts from index 0.

bc(python). var arr=[]
arr=[1, 2, 3]
arr[0] = "Hi!"


Arrays are allocated linearly in memory, so they are fast, but very large arrays (more than tens of thousands of elements) may cause fragmentation.

There are specialized arrays (listed below) for some built&#45;in data types which do not suffer from this and use less memory, but they are atomic and generally run a little slower, so they are only justified for very large amount of data.

h3(#dictionary). "Dictionary":class_dictionary

Associative container which contains values referenced by unique keys.

bc(python). var d={4:5, "a key":"a value", 28:[1,2,3]}
d["Hi!"] = 0


Lua&#45;style table syntax is also supported, given that it's easier to write and read:

<pre class="python">

var d = {
    somekey = 2,
    otherkey = [2,3,4],
    morekey = &quot;Hello&quot;
}
</pre>

h3(#bytearray). "ByteArray":class_bytearray

An array of bytes can only contain bytes (integers from 0 to 255).

This, and all of the following specialized array types, are optimized for memory usage and can't fragment the memory.

h3(#intarray). "IntArray":class_intarray

Array of integers can only contain integers.

h3(#floatarray). "FloatArray":class_floatarray

Array of floats can only contain floats.

h3(#stringarray). "StringArray":class_stringarray

Array of strings can only contain strings.

h3(#vector2array). "Vector2Array":class_vector2array

Array of Vector2 can only contain 2D Vectors.

h3(#vector3array). "Vector3Array":class_vector3array

Array of Vector3 can only contain 3D Vectors.

h3(#colorarray). "ColorArray":class_colorarray

Array of Color can only contains colors.

h1(#data). Data

h2(#variables). Variables

Variables can exist as class members or local to functions. They are created with the &quot;var&quot; keyword and may, optionally, be assigned a value upon initialization.

bc(python). var a  # data type is null by default
var b = 5
var c = 3.8
var d = b + c  # variables are always initialized in order


h2(#constants). Constants

Constants are similar to variables, but must be constants or constant expressions and must be assigned on initialization.

bc(python). const a = 5
const b = Vector2(20, 20)
const c = 10 + 20 # constant expression
const d = Vector2(20, 30).x  # constant expression: 20
const e = [1, 2, 3, 4][0]  # constant expression: 1
const f = sin(20)  # sin() can be used in constant expressions
const g = x + 20  # invalid; this is not a constant expression!


h2(#functions). Functions

Functions always belong to a class. The scope priority for variable look&#45;up is: local &#45;&gt; class member &#45;&gt; global. &quot;self&quot; is provided as an option for accessing class members but is not always required (and must _not_ be defined as the first parameter, like in Python). For performance reasons, functions are not considered class members, so they can't be referenced directly. A function can return at any point. The default return value is null.

bc(python). func myfunction(a, b):
    print(a)
    print(b)
    return a + b  # return is optional; without it null is returned


h3(#statements-and-control-flow). Statements and Control Flow

Statements are standard and can be assignments, function calls, control flow structures, etc (see below). &quot;;&quot; as a statement separator is entirely optional.

h3(#ifelseelif). if/else/elif

Simple conditions are created by using the _if/else/elif_ syntax. Parenthesis around statements is allowed, but not requiered. Given the nature of the tab&#45;based indentation, elif can be used instead of else:/if: to mantain a level of indentation.

bc(python). if [expression]:
    statement(s)
elif [expression]:
    statement(s)
else:
    statement(s)


h3(#while). while

Simple loops are created by using _while_ syntax. Loops can be broken using _break_ or continued using _continue_:

bc(python). while [expression]:
    statement(s)


h3(#for). for

To iterate through a range, such as an array or table, a _for_ loop is used. For loops store the index in the loop variable on each iteration.

<pre class="python">
for i in [0, 1, 2]:
    statement  # loop iterates 3 times with i as 0, then 1 and finally 2

var dict = {&quot;a&quot;:0, &quot;b&quot;:1, &quot;c&quot;:2}
for i in dict:
    print(dict[i])  # loop iterates the keys; with i being &quot;a&quot;,&quot;b&quot; and c&quot; it prints 0, 1 and 2.

for i in range(3):
    statement  # similar to [0, 1, 2] but does not allocate an array

for i in range(1,3):
    statement  # similar to [1, 2] but does not allocate an array

for i in range(2,8,2):
    statement  # similar to [2, 4, 6] but does not allocate an array
</pre>

h3(#function-call-on-base-class). Function Call on Base Class

To call a function on a base class (that was overridden in the current one), prepend the &quot;.&quot; to the function name:

bc. .basefunc()


However, remember that functions such as &#95;init, and most notifications such as &#95;enter&#95;tree, &#95;exit&#95;tree, &#95;process, &#95;fixed&#95;process, etc. are called in all base classes automatically, so this should be only for calling functions you write yourself.

h1(#classes). Classes

By default, the body of a script file is an unnamed class and it can only be referenced externally as a resource or file. Class syntax is meant to be very compact and can only contain member variables or functions. Static functions are allowed, but not static members (this is in the spirit of thread safety since scripts can be initialized in separate threads without the user knowing). In the same way, member variables (including arrays and dictionaries) are initialized every time an instance is created.

h2(#class-file-example). Class File Example

Imagine the following being stored in a file like myclass.gd.

<pre class="python">
var a = 5

func print_value_of_a():
    print(a)
</pre>

h2(#inheritance). Inheritance

A class file can inherit from a global class, another file or a subclass inside another file. Multiple inheritance is not allowed. The &quot;extends&quot; syntax is used:

<pre class="python">
# extend from some class (global)
extends SomeClass 

# optionally, extend from another file

extends &quot;somefile.gd&quot; 

# extend from a subclass in another file

extends &quot;somefile.gd&quot;.Subclass
</pre>

h2(#inheritance-testing). Inheritance Testing

It's possible to check if an instance inherits from a given class. For this the &quot;extends&quot; keyword can be used as an operator instead:

<pre class="python">
const enemy_class = preload(&quot;enemy.gd&quot;)  # cache the enemy class

[..]

if (entity extends enemy_class):
    entity.apply_damage()
</pre>

h2(#constructor). Constructor

A class can have an optional constructor; a function named &quot;&#95;init&quot; that is called when the class is instanced.

h4(#arguments-to-parent-constructor). Arguments to Parent Constructor

When inheriting, parent constructors are called automatically (no need to call .&#95;init()). If a parent constructor takes arguments, they are passed like this:

bc(python). func _init(args).(parentargs):
   pass


h2(#sub-classes). Sub Classes

A class file can have subclasses. This syntax should be straightforward:

<pre class="python">
class SomeSubClass:
    var a = 5
    func print_value_of_a():
        print(a)

func _init():
    var sc = SomeSubClass.new()  #instance by calling built-in new
    sc.print_value_of_a()
</pre>

h2(#classes-as-objects). Classes as Objects

It may be desired at some point to load a class from a file and then instance it. Since the global scope does not exist, classes must be loaded as a resource. Instancing is done by calling the &quot;new&quot; function in a class object:

<pre class="python">
# load the class (loaded every time the script is instanced)
var MyClass = load(&quot;myclass.gd&quot;)

# alternatively, using the preload() function preloads the class at compile time

var MyClass2 = preload(&quot;myclass.gd&quot;)

func _init():
    var a = MyClass.new()
    a.somefunction()
</pre>

h2(#exports). Exports

Class members can be exported. This means their value gets saved along with a scene. If class members have initializers to constant expressions, they will be available for editing in the property editor. Exporting is done by using the export keyword:

<pre class="python">
extends Button

export var data  # value will be saved
export var number = 5  # also available to the property editor
</pre>

One of the fundamental benefits of exporting member variables is to have them visible in the property editor. This way artists and game designers can modify values that later influence how the program runs. For this, a special export syntax is provided for more detail in the exported variables:

<pre class="python">
# if the exported value assigns a constant or constant expression, the type will be inferred and used in the editor

export var number = 5

# export can take a basic data type as an argument which will be used in the editor

export(int) var number

# export can also take a resource type to use as a hint

export(Texture) var character_face

# integers and strings hint enumerated values

export(int, &quot;Warrior&quot;, &quot;Magician&quot;, &quot;Thief&quot;) var character_class  # (editor will set them as 0, 1 and 2) 
export(String, &quot;Rebecca&quot;, &quot;Mary&quot;, &quot;Leah&quot;) var character_name 

# strings as paths

export(String, FILE) var f  # string is a path to a file
export(String, DIR) var f  # string is a path to a directory
export(String, FILE, &quot;*.txt&quot;) var f  # string is a path to a file, custom filter provided as hint

# integers and floats hint ranges

export(int, 20) var i  # 0 to 20 allowed
export(int, -10, 20) var j  # -10 to 20 allowed
export(float, -10, 20, 0.2) var k  # -10 to 20 allowed, with stepping of 0.2

# color can hint availability of alpha

export(Color, RGB) var col  # Color is RGB
export(Color, RGBA) var col  # Color is RGBA
</pre>

It must be noted that even if the script is not being run while at the editor, the exported properties are still editable (see below for &quot;tool&quot;).

h4(#exporting-arrays). Exporting Arrays

Exporting arrays works too but there is a restriction. While regular arrays are created local to every instance, exported arrays are shared between all instances. This means that editing them in one instance will cause them to change in all other instances. Exported arrays can have initializers, but they must be constant expressions.

<pre class="python">
# Exported array, shared between all instances. 
# Default value must be a constant expression.

export var a=[1,2,3]

# Typed arrays also work, only initialized empty:

export var vector3s = Vector3Array()
export var strings = StringArray()

# Regular array, created local for every instance.
# Default value can include run-time values, but can't
# be exported.

var b = [a,2,3]
</pre>

h2(#static-functions). Static Functions

A function can be declared static. When a function is static it has no access to the instance member variables or &quot;self&quot;. This is mainly useful to make libraries of helper functions:

bc(python). static func sum2(a, b):
    return a + b


h2(#settersgetters). Setters/Getters

It is often useful to know when an member variable changed. It may also be desired to encapsulate it's access. For this, GDScript provides a _setter_/_getter_ helper using the &quot;setget&quot; keyword. Just add it at the end of the variable definition line like this:

bc(python). var myinteger = 5 setget myinteger_changed


If the value of &quot;myinteger&quot; is modified _externally_ (not from local usage in the class), the _setter_ function will be called beforehand. The _setter_ must, then, decide what to do with the new value. The _setter function_ looks like this:

bc(python). func myinteger_changed(newvalue):
    myinteger=newvalue


A _setter_ and a _getter_ can be used together too, just define both of them:

<pre class="python">
var myvar setget myvar_set,myvar_get

func myvar_set(newvalue):
    myvar=newvalue

func myvar_get():
    return myvar # getter must return a value

</pre>

Using simply a _getter_ is possible too, just skip the setter:

bc(python). var myvar setget ,myvar_get


Note: As mentioned before, local access will not trigger the setter and getter. example:

This is specially useful when exporting variables to editor in tool scripts or plugins, for validating input.

<pre class="python">

func _init():
#does not trigger setter/getter
    myinteger=5
    print(myinteger)
#triggers setter/getter
    self.myinteger=5
    print(self.myinteger)
</pre>

h2(#tool-mode). Tool Mode

Scripts, by default, don't run inside the editor and only the exported properties can be changed. In some cases it is desired that they do run inside the editor (as long as they don't execute game code or manually avoid doing so). For this, the &quot;tool&quot; keyword exists and must be placed at the top of the file:

<pre class="python">
tool
extends Button

func _init():
    print(&quot;Hello&quot;)
</pre>

h2(#memory-management). Memory Management

If a class inherits from _Reference_, then instances will be freed when no longer in use. No garbage collector exists, just simple reference counting. By default, all classes that don't define inheritance extend _Reference_. If this is not desired, then a class must inherit _Object_ manually and must call instance.free(). To avoid reference cycles that can't be freed, a weakref() function is provided for creating weak references.

h2(#function-references). Function References

Functions can't be referenced because they are not treated as class members. There are two alternatives to this, though. The &quot;call&quot; function or the funcref() helper.

<pre class="python">
instance.call(&quot;funcname&quot;, args)  # call a function by name

var fr = funcref(instance, &quot;funcname&quot;)  # create a function ref
fr.exec(args)
</pre>

h2(#signals). Signals

It is often desired to send a notification that something happened in an instance. GDScript supports creation of built&#45;in Godot signals. Declaring a signal in GDScript is easy, in the body of the class, just write:

bc(python). # no arguments
signal your_signal_name
# with arguments
signal your_signal_name_with_args(a,b)


Connecting signals from code is easy, just take the instance of a class where the signal was declared and connect it to the method of another instance:

<pre class="python">
func _callback_no_args():
   print(&quot;Got callback!&quot;)

func _callback_args(a,b):
   print(&quot;Got callback with args! a: &quot;,a,&quot; and b: &quot;,b)

func _at_some_func():
   instance.connect(&quot;your_signal_name&quot;,self,&quot;callback_no_args&quot;)
   instance.connect(&quot;your_signal_name_with_args&quot;,self,&quot;callback_args&quot;)
</pre>

It is also possible to bind arguments to a signal that lacks them with your custom values:

bc(python). func _at_some_func():
   instance.connect("your_signal_name_with_args",self,"callback_no_args",[22,"hello"])


This is very useful when a signal from many objects is connected to a single callback and the sender must be identified:

<pre class="python">

func _button_pressed(which):
  print(&quot;Button was pressed: &quot;,which.get_name())

func _ready():
  for b in get_node(&quot;buttons&quot;).get_children():
     b.connect(&quot;pressed&quot;,self,&quot;_button_pressed&quot;,[b])
</pre>

Finally, emitting a custom signal is done by using the "Object.emit&#95;signal":class_object#emit_signal method:

bc(python). func _at_some_func():
   emit_signal("your_signal_name")
   emit_signal("your_signal_name_with_args",55,128)
   someinstance.emit_signal("somesignal")


h2(#coroutines). Coroutines

GDScript has some support for coroutines via the yield() built&#45;in function. The way it works is very simple: Calling &quot;yield()&quot; will immediately return from the current function, with the current frozen state of the same function as the return value. Calling &quot;resume&quot; on this resulting object will continue execution and return whathever the function returns. Once resumed the state object becomes invalid. Here is an example:

<pre class="python">

func myfunc():

   print(&quot;hello&quot;)
   yield()
   print(&quot;world&quot;)

func _ready():

    var y = myfunc()
    #function state saved in 'y'
    print(&quot;my dear&quot;)
    y.resume()
    # 'y' resumed and is now an invalid state

</pre>

Will print:

bc. hello
my dear
world


It is also possible to pass values between yield() and resume(), for example:

<pre class="python">

func myfunc():

   print(&quot;hello&quot;)
   print( yield() )
   return &quot;cheers!&quot;

func _ready():

    var y = myfunc()
    #function state saved in 'y'
    print( y.resume(&quot;world&quot;) )
    # 'y' resumed and is now an invalid state

</pre>

Will print:

<pre>

hello
world
cheers!

</pre>

h2(#coroutines-signals). Coroutines &amp; Signals

The real strength of using yield() is when combined with signals (if you haven't heard about signals yet, come back after a few tutorials). yield() can accept two parameters, an object and a signal. When the signal is activated, execution will return. Here are some examples:

<pre class="python">

#resume execution the next frame
yield( get_tree(), &quot;idle_frame&quot; )

#resume execution when animation is done playing:
yield( get_node(&quot;AnimationPlayer&quot;), &quot;finished&quot; )

</pre>

&#45;&#45;&#45; //"Juan Linietsky":reduzio@gmail.com 2013/11/10 18:09//

<ol start="3" style="list-style-type: lower-alpha;">
<li>Juan Linietsky, Ariel Manzur, Distributed under the terms of the "CC By":https://creativecommons.org/licenses/by/3.0/legalcode license.</li>
</ol>
